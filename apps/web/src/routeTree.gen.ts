/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SetupRouteImport } from './routes/setup'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as SettingsRouteRouteImport } from './routes/settings/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LibraryIndexRouteImport } from './routes/library/index'
import { Route as SettingsUsersRouteImport } from './routes/settings/users'
import { Route as SettingsSystemRouteImport } from './routes/settings/system'
import { Route as SettingsLibrariesRouteImport } from './routes/settings/libraries'
import { Route as MediaMediaIdRouteImport } from './routes/media/$mediaId'

const SetupRoute = SetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LibraryIndexRoute = LibraryIndexRouteImport.update({
  id: '/library/',
  path: '/library/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsUsersRoute = SettingsUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsSystemRoute = SettingsSystemRouteImport.update({
  id: '/system',
  path: '/system',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsLibrariesRoute = SettingsLibrariesRouteImport.update({
  id: '/libraries',
  path: '/libraries',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const MediaMediaIdRoute = MediaMediaIdRouteImport.update({
  id: '/media/$mediaId',
  path: '/media/$mediaId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/setup': typeof SetupRoute
  '/media/$mediaId': typeof MediaMediaIdRoute
  '/settings/libraries': typeof SettingsLibrariesRoute
  '/settings/system': typeof SettingsSystemRoute
  '/settings/users': typeof SettingsUsersRoute
  '/library': typeof LibraryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/setup': typeof SetupRoute
  '/media/$mediaId': typeof MediaMediaIdRoute
  '/settings/libraries': typeof SettingsLibrariesRoute
  '/settings/system': typeof SettingsSystemRoute
  '/settings/users': typeof SettingsUsersRoute
  '/library': typeof LibraryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/setup': typeof SetupRoute
  '/media/$mediaId': typeof MediaMediaIdRoute
  '/settings/libraries': typeof SettingsLibrariesRoute
  '/settings/system': typeof SettingsSystemRoute
  '/settings/users': typeof SettingsUsersRoute
  '/library/': typeof LibraryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/login'
    | '/register'
    | '/setup'
    | '/media/$mediaId'
    | '/settings/libraries'
    | '/settings/system'
    | '/settings/users'
    | '/library'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/login'
    | '/register'
    | '/setup'
    | '/media/$mediaId'
    | '/settings/libraries'
    | '/settings/system'
    | '/settings/users'
    | '/library'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/login'
    | '/register'
    | '/setup'
    | '/media/$mediaId'
    | '/settings/libraries'
    | '/settings/system'
    | '/settings/users'
    | '/library/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  SetupRoute: typeof SetupRoute
  MediaMediaIdRoute: typeof MediaMediaIdRoute
  LibraryIndexRoute: typeof LibraryIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/library/': {
      id: '/library/'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/users': {
      id: '/settings/users'
      path: '/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof SettingsUsersRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/system': {
      id: '/settings/system'
      path: '/system'
      fullPath: '/settings/system'
      preLoaderRoute: typeof SettingsSystemRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/libraries': {
      id: '/settings/libraries'
      path: '/libraries'
      fullPath: '/settings/libraries'
      preLoaderRoute: typeof SettingsLibrariesRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/media/$mediaId': {
      id: '/media/$mediaId'
      path: '/media/$mediaId'
      fullPath: '/media/$mediaId'
      preLoaderRoute: typeof MediaMediaIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface SettingsRouteRouteChildren {
  SettingsLibrariesRoute: typeof SettingsLibrariesRoute
  SettingsSystemRoute: typeof SettingsSystemRoute
  SettingsUsersRoute: typeof SettingsUsersRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsLibrariesRoute: SettingsLibrariesRoute,
  SettingsSystemRoute: SettingsSystemRoute,
  SettingsUsersRoute: SettingsUsersRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SetupRoute: SetupRoute,
  MediaMediaIdRoute: MediaMediaIdRoute,
  LibraryIndexRoute: LibraryIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
