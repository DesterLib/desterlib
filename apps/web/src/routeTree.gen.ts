/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteRouteImport } from './routes/settings/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TvshowSplatRouteImport } from './routes/tvshow/$'
import { Route as SettingsLibrariesRouteImport } from './routes/settings/libraries'
import { Route as MovieSplatRouteImport } from './routes/movie/$'

const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TvshowSplatRoute = TvshowSplatRouteImport.update({
  id: '/tvshow/$',
  path: '/tvshow/$',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsLibrariesRoute = SettingsLibrariesRouteImport.update({
  id: '/libraries',
  path: '/libraries',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const MovieSplatRoute = MovieSplatRouteImport.update({
  id: '/movie/$',
  path: '/movie/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/movie/$': typeof MovieSplatRoute
  '/settings/libraries': typeof SettingsLibrariesRoute
  '/tvshow/$': typeof TvshowSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/movie/$': typeof MovieSplatRoute
  '/settings/libraries': typeof SettingsLibrariesRoute
  '/tvshow/$': typeof TvshowSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteRouteWithChildren
  '/movie/$': typeof MovieSplatRoute
  '/settings/libraries': typeof SettingsLibrariesRoute
  '/tvshow/$': typeof TvshowSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/movie/$'
    | '/settings/libraries'
    | '/tvshow/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/movie/$' | '/settings/libraries' | '/tvshow/$'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/movie/$'
    | '/settings/libraries'
    | '/tvshow/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  MovieSplatRoute: typeof MovieSplatRoute
  TvshowSplatRoute: typeof TvshowSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tvshow/$': {
      id: '/tvshow/$'
      path: '/tvshow/$'
      fullPath: '/tvshow/$'
      preLoaderRoute: typeof TvshowSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/libraries': {
      id: '/settings/libraries'
      path: '/libraries'
      fullPath: '/settings/libraries'
      preLoaderRoute: typeof SettingsLibrariesRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/movie/$': {
      id: '/movie/$'
      path: '/movie/$'
      fullPath: '/movie/$'
      preLoaderRoute: typeof MovieSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface SettingsRouteRouteChildren {
  SettingsLibrariesRoute: typeof SettingsLibrariesRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsLibrariesRoute: SettingsLibrariesRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  MovieSplatRoute: MovieSplatRoute,
  TvshowSplatRoute: TvshowSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
