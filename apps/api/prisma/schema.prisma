// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  MOVIE
  TV_SHOW
  MUSIC
  COMIC
}

model Media {
  id          String     @id @default(cuid())
  title       String
  type        MediaType
  description String?
  posterUrl   String?
  backdropUrl String?
  releaseDate DateTime?
  rating      Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations - subtypes point to Media, not the other way around
  movie       Movie?
  tvShow      TVShow?
  music       Music?
  comic       Comic?

  people      MediaPerson[]
  genres      MediaGenre[]
  externalIds ExternalId[]
  collections MediaCollection[]

  @@index([type])
  @@index([releaseDate])
  @@index([rating])
  @@index([title])
}

// ────────────────────────────
// MOVIES
// ────────────────────────────
model Movie {
  id              String   @id @default(cuid())
  duration        Int?     // in minutes
  director        String?
  trailerUrl      String?
  filePath        String?  @unique // File path on disk
  fileSize        BigInt?  // File size in bytes
  fileModifiedAt  DateTime? // Last modified time of file
  
  // Required relationship to Media
  mediaId         String   @unique
  media           Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@index([filePath])
}

// ────────────────────────────
// TV SHOWS
// ────────────────────────────
model TVShow {
  id        String     @id @default(cuid())
  seasons   Season[]
  creator   String?
  network   String?
  
  // Required relationship to Media
  mediaId   String     @unique
  media     Media      @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model Season {
  id        String     @id @default(cuid())
  number    Int
  episodes  Episode[]
  tvShowId  String
  tvShow    TVShow     @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  
  @@unique([tvShowId, number])
  @@index([tvShowId])
}

model Episode {
  id              String   @id @default(cuid())
  title           String
  number          Int
  duration        Int?
  airDate         DateTime?
  filePath        String?  @unique // File path on disk
  fileSize        BigInt?  // File size in bytes
  fileModifiedAt  DateTime? // Last modified time of file
  seasonId        String
  season          Season    @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  
  @@unique([seasonId, number])
  @@index([seasonId])
  @@index([filePath])
}

// ────────────────────────────
// MUSIC
// ────────────────────────────
model Music {
  id              String   @id @default(cuid())
  artist          String
  album           String?
  genre           String?
  duration        Int?
  filePath        String?  @unique // File path on disk
  fileSize        BigInt?  // File size in bytes
  fileModifiedAt  DateTime? // Last modified time of file
  
  // Required relationship to Media
  mediaId         String   @unique
  media           Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@index([artist])
  @@index([genre])
  @@index([filePath])
}

// ────────────────────────────
// COMICS
// ────────────────────────────
model Comic {
  id              String   @id @default(cuid())
  issue           Int?
  volume          String?
  publisher       String?
  pages           Int?
  filePath        String?  @unique // File path on disk
  fileSize        BigInt?  // File size in bytes
  fileModifiedAt  DateTime? // Last modified time of file
  
  // Required relationship to Media
  mediaId         String   @unique
  media           Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@index([publisher])
  @@index([filePath])
}

// ────────────────────────────
// PERSON
// ────────────────────────────
enum RoleType {
  ACTOR
  DIRECTOR
  WRITER
  PRODUCER
  ARTIST
  COMPOSER
  AUTHOR
}

model Person {
  id         String         @id @default(cuid())
  name       String
  bio        String?
  birthDate  DateTime?
  profileUrl String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Media relationships
  media      MediaPerson[]
  
  @@index([name])
}

// ────────────────────────────
// JOIN TABLE (MEDIA ↔ PERSON)
// ────────────────────────────
model MediaPerson {
  id        String    @id @default(cuid())
  role      RoleType
  mediaId   String
  personId  String
  character String?   // e.g., "Bruce Wayne"

  media     Media     @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  person    Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  
  @@unique([mediaId, personId, role])
  @@index([mediaId])
  @@index([personId])
}

// ────────────────────────────
// GENRES
// ────────────────────────────
model Genre {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  media       MediaGenre[]

  @@index([slug])
}

// ────────────────────────────
// JOIN TABLE (MEDIA ↔ GENRE)
// ────────────────────────────
model MediaGenre {
  id       String  @id @default(cuid())
  mediaId  String
  genreId  String

  media    Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  genre    Genre   @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([mediaId, genreId])
  @@index([mediaId])
  @@index([genreId])
}

// ────────────────────────────
// COLLECTIONS
// ────────────────────────────
model Collection {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  description String?
  posterUrl   String?
  backdropUrl String?
  
  // Library-specific fields
  isLibrary   Boolean            @default(false)
  libraryPath String?            // File system path for libraries
  libraryType MediaType?         // Type of media in this library
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Self-referential for nested collections (e.g., MCU > Phase 1)
  parentId    String?
  parent      Collection?        @relation("CollectionHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Collection[]       @relation("CollectionHierarchy")

  media       MediaCollection[]
  
  // Settings relationship for libraries
  settingsId  String?
  settings    Settings?          @relation(fields: [settingsId], references: [id], onDelete: SetNull)

  @@index([slug])
  @@index([parentId])
  @@index([isLibrary])
  @@index([settingsId])
}

// ────────────────────────────
// JOIN TABLE (MEDIA ↔ COLLECTION)
// ────────────────────────────
model MediaCollection {
  id           String     @id @default(cuid())
  mediaId      String
  collectionId String
  order        Int?       // For ordering media within a collection

  media        Media      @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([mediaId, collectionId])
  @@index([mediaId])
  @@index([collectionId])
  @@index([order])
}

// ────────────────────────────
// EXTERNAL IDS (TMDB, IMDB, etc.)
// ────────────────────────────
enum ExternalIdSource {
  TMDB
  IMDB
  TVDB
  ANIDB
  MYANIMELIST
  MUSICBRAINZ
  SPOTIFY
  COMICVINE
  OTHER
}

model ExternalId {
  id        String           @id @default(cuid())
  source    ExternalIdSource
  externalId String
  mediaId   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  media     Media            @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([source, externalId])
  @@unique([source, mediaId])
  @@index([mediaId])
  @@index([externalId])
}

// ────────────────────────────
// AUTHENTICATION & USERS
// ────────────────────────────
enum UserRole {
  ADMIN
  USER
  GUEST
}

enum AuthMethod {
  PASSWORD
  PIN
  PASSWORDLESS
}

model User {
  id              String      @id @default(cuid())
  username        String      @unique
  email           String?     @unique
  displayName     String?
  avatar          String?
  role            UserRole    @default(USER)
  
  // Authentication methods (can have multiple)
  passwordHash    String?     // bcrypt hash for password auth
  pinHash         String?     // bcrypt hash for PIN auth
  isPasswordless  Boolean     @default(false) // Allow login without credentials
  
  // Account status
  isActive        Boolean     @default(true)
  isLocked        Boolean     @default(false)
  failedLoginAttempts Int     @default(0)
  lastLoginAt     DateTime?
  
  // Metadata
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  sessions        Session[]
  apiKeys         ApiKey[]
  
  @@index([username])
  @@index([email])
  @@index([role])
  @@index([isActive])
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique // JWT or session token
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  lastActiveAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String   // Name/description of the key
  keyHash     String   @unique // bcrypt hash of the API key
  keyPrefix   String   // First 8 chars for identification (e.g., "dester_abc123...")
  
  // Permissions
  scopes      String   @default("*") // JSON array of allowed scopes
  
  // Status
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime? // Optional expiration
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([keyPrefix])
  @@index([isActive])
}

// ────────────────────────────
// SETTINGS & CONFIGURATION
// ────────────────────────────
model Settings {
  id                String       @id @default("default")
  isSetupComplete   Boolean      @default(false)
  tmdbApiKey        String?
  
  // Authentication settings
  requireAuth       Boolean      @default(true)
  allowRegistration Boolean      @default(false)
  sessionDuration   Int          @default(604800) // 7 days in seconds
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  libraries         Collection[] // Libraries are just special collections
}
