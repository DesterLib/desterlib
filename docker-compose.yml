version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: desterlib-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: desterlib_prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: desterlib-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - apps/api/.env
    environment:
      # Database connection variables for the startup script
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: desterlib_prod
      # Application environment
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/desterlib_prod?schema=public
      NODE_ENV: production
      PORT: 3001
      FRONTEND_URL: http://localhost:3001
    ports:
      - "0.0.0.0:3001:3001"
    # Production: no volume mounts, uses built container
    volumes: []
    # Use the default CMD from Dockerfile which runs the startup script

volumes:
  postgres_data:
