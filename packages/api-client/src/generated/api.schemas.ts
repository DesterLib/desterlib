/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
export type SuccessResponseData = { [key: string]: unknown };

export interface SuccessResponse {
  success?: boolean;
  requestId?: string;
  data?: SuccessResponseData;
}

export type ErrorResponseError = {
  code?: string;
  message?: string;
};

export interface ErrorResponse {
  success?: boolean;
  requestId?: string;
  error?: ErrorResponseError;
}

/**
 * Type of media to scan
 */
export type MediaType = (typeof MediaType)[keyof typeof MediaType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MediaType = {
  MOVIE: "MOVIE",
  TV_SHOW: "TV_SHOW",
  MUSIC: "MUSIC",
  COMIC: "COMIC",
} as const;

export interface ScannedFile {
  path?: string;
  name?: string;
  size?: number;
  extension?: string;
  relativePath?: string;
}

export type ScanResultStats = {
  /** Number of new files added */
  added?: number;
  /** Number of files already existing */
  skipped?: number;
  /** Number of existing files updated */
  updated?: number;
};

export interface ScanResult {
  collectionName?: string;
  mediaType?: MediaType;
  scannedPath?: string;
  totalFiles?: number;
  files?: ScannedFile[];
  timestamp?: string;
  stats?: ScanResultStats;
}

export interface Pagination {
  /** Total number of items */
  total?: number;
  /** Number of items per page */
  limit?: number;
  /** Number of items skipped */
  offset?: number;
  /** Whether there are more items available */
  hasMore?: boolean;
}

export interface Media {
  id?: string;
  title?: string;
  type?: MediaType;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  posterUrl?: string | null;
  /** @nullable */
  backdropUrl?: string | null;
  /** @nullable */
  releaseDate?: string | null;
  /** @nullable */
  rating?: number | null;
  createdAt?: string;
  updatedAt?: string;
  /** @nullable */
  movie?: Movie;
  /** @nullable */
  tvShow?: TVShow;
  /** @nullable */
  music?: Music;
  /** @nullable */
  comic?: Comic;
  genres?: MediaGenre[];
  people?: MediaPerson[];
  collections?: MediaCollection[];
  externalIds?: ExternalId[];
}

export interface Movie {
  id?: string;
  /**
   * Duration in minutes
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  director?: string | null;
  /** @nullable */
  trailerUrl?: string | null;
  mediaId?: string;
}

export interface TVShow {
  id?: string;
  /** @nullable */
  creator?: string | null;
  /** @nullable */
  network?: string | null;
  mediaId?: string;
  seasons?: Season[];
}

export interface Season {
  id?: string;
  number?: number;
  tvShowId?: string;
  episodes?: Episode[];
}

export interface Episode {
  id?: string;
  title?: string;
  number?: number;
  /**
   * Duration in minutes
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  airDate?: string | null;
  /** @nullable */
  videoUrl?: string | null;
  seasonId?: string;
}

export interface Music {
  id?: string;
  artist?: string;
  /** @nullable */
  album?: string | null;
  /** @nullable */
  genre?: string | null;
  /**
   * Duration in seconds
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  trackUrl?: string | null;
  mediaId?: string;
}

export interface Comic {
  id?: string;
  /** @nullable */
  issue?: number | null;
  /** @nullable */
  volume?: string | null;
  /** @nullable */
  publisher?: string | null;
  /** @nullable */
  pages?: number | null;
  /** @nullable */
  fileUrl?: string | null;
  mediaId?: string;
}

export interface Genre {
  id?: string;
  name?: string;
  slug?: string;
  /** @nullable */
  description?: string | null;
}

export interface MediaGenre {
  id?: string;
  mediaId?: string;
  genreId?: string;
  genre?: Genre;
}

export interface Person {
  id?: string;
  name?: string;
  /** @nullable */
  bio?: string | null;
  /** @nullable */
  birthDate?: string | null;
  /** @nullable */
  profileUrl?: string | null;
}

export type MediaPersonRole =
  (typeof MediaPersonRole)[keyof typeof MediaPersonRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MediaPersonRole = {
  ACTOR: "ACTOR",
  DIRECTOR: "DIRECTOR",
  WRITER: "WRITER",
  PRODUCER: "PRODUCER",
  ARTIST: "ARTIST",
  COMPOSER: "COMPOSER",
  AUTHOR: "AUTHOR",
} as const;

export interface MediaPerson {
  id?: string;
  role?: MediaPersonRole;
  /** @nullable */
  character?: string | null;
  mediaId?: string;
  personId?: string;
  person?: Person;
}

export interface Collection {
  id?: string;
  name?: string;
  slug?: string;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  posterUrl?: string | null;
  /** @nullable */
  backdropUrl?: string | null;
}

export interface MediaCollection {
  id?: string;
  mediaId?: string;
  collectionId?: string;
  /** @nullable */
  order?: number | null;
  collection?: Collection;
}

export type ExternalIdSource =
  (typeof ExternalIdSource)[keyof typeof ExternalIdSource];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExternalIdSource = {
  TMDB: "TMDB",
  IMDB: "IMDB",
  TVDB: "TVDB",
  ANIDB: "ANIDB",
  MYANIMELIST: "MYANIMELIST",
  MUSICBRAINZ: "MUSICBRAINZ",
  SPOTIFY: "SPOTIFY",
  COMICVINE: "COMICVINE",
  OTHER: "OTHER",
} as const;

export interface ExternalId {
  id?: string;
  source?: ExternalIdSource;
  externalId?: string;
  mediaId?: string;
}

export type GetAdminAlertsHistoryParams = {
  limit?: number;
};

export type PostAuthRegisterBodyRole =
  (typeof PostAuthRegisterBodyRole)[keyof typeof PostAuthRegisterBodyRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthRegisterBodyRole = {
  ADMIN: "ADMIN",
  USER: "USER",
  GUEST: "GUEST",
} as const;

export type PostAuthRegisterBody = {
  username: string;
  email?: string;
  displayName?: string;
  password?: string;
  pin?: string;
  isPasswordless?: boolean;
  role?: PostAuthRegisterBodyRole;
};

export type PostAuthLoginBody = {
  username: string;
  password?: string;
  pin?: string;
};

export type PostAuthLoginPasswordlessBody = {
  username: string;
};

export type PostAuthRefreshBody = {
  refreshToken: string;
};

export type PostAuthLogoutBody = {
  refreshToken: string;
};

export type GetApiComicsParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter comics released after this date
   */
  releasedAfter?: string;
  /**
   * Filter comics released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiComicsSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiComicsSortOrder;
};

export type GetApiComicsSortBy =
  (typeof GetApiComicsSortBy)[keyof typeof GetApiComicsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiComicsSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiComicsSortOrder =
  (typeof GetApiComicsSortOrder)[keyof typeof GetApiComicsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiComicsSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiComics200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiComics200AllOf = {
  data?: GetApiComics200AllOfData;
};

export type GetApiComics200 = SuccessResponse & GetApiComics200AllOf;

export type GetApiComicsId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiComicsId200AllOf = {
  data?: GetApiComicsId200AllOfData;
};

export type GetApiComicsId200 = SuccessResponse & GetApiComicsId200AllOf;

export type GetApiMediaParams = {
  /**
   * Filter by media type
   */
  type?: MediaType;
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter media released after this date
   */
  releasedAfter?: string;
  /**
   * Filter media released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiMediaSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiMediaSortOrder;
};

export type GetApiMediaSortBy =
  (typeof GetApiMediaSortBy)[keyof typeof GetApiMediaSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMediaSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiMediaSortOrder =
  (typeof GetApiMediaSortOrder)[keyof typeof GetApiMediaSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMediaSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiMedia200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiMedia200AllOf = {
  data?: GetApiMedia200AllOfData;
};

export type GetApiMedia200 = SuccessResponse & GetApiMedia200AllOf;

export type GetApiMediaStatistics200AllOfDataStatisticsByType = {
  movies?: number;
  tvShows?: number;
  music?: number;
  comics?: number;
};

export type GetApiMediaStatistics200AllOfDataStatistics = {
  total?: number;
  byType?: GetApiMediaStatistics200AllOfDataStatisticsByType;
};

export type GetApiMediaStatistics200AllOfData = {
  message?: string;
  statistics?: GetApiMediaStatistics200AllOfDataStatistics;
};

export type GetApiMediaStatistics200AllOf = {
  data?: GetApiMediaStatistics200AllOfData;
};

export type GetApiMediaStatistics200 = SuccessResponse &
  GetApiMediaStatistics200AllOf;

export type GetApiMediaId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiMediaId200AllOf = {
  data?: GetApiMediaId200AllOfData;
};

export type GetApiMediaId200 = SuccessResponse & GetApiMediaId200AllOf;

export type GetApiMoviesParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter movies released after this date
   */
  releasedAfter?: string;
  /**
   * Filter movies released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiMoviesSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiMoviesSortOrder;
};

export type GetApiMoviesSortBy =
  (typeof GetApiMoviesSortBy)[keyof typeof GetApiMoviesSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMoviesSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiMoviesSortOrder =
  (typeof GetApiMoviesSortOrder)[keyof typeof GetApiMoviesSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMoviesSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiMovies200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiMovies200AllOf = {
  data?: GetApiMovies200AllOfData;
};

export type GetApiMovies200 = SuccessResponse & GetApiMovies200AllOf;

export type GetApiMoviesId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiMoviesId200AllOf = {
  data?: GetApiMoviesId200AllOfData;
};

export type GetApiMoviesId200 = SuccessResponse & GetApiMoviesId200AllOf;

export type GetApiMusicParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter music released after this date
   */
  releasedAfter?: string;
  /**
   * Filter music released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiMusicSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiMusicSortOrder;
};

export type GetApiMusicSortBy =
  (typeof GetApiMusicSortBy)[keyof typeof GetApiMusicSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMusicSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiMusicSortOrder =
  (typeof GetApiMusicSortOrder)[keyof typeof GetApiMusicSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMusicSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiMusic200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiMusic200AllOf = {
  data?: GetApiMusic200AllOfData;
};

export type GetApiMusic200 = SuccessResponse & GetApiMusic200AllOf;

export type GetApiMusicId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiMusicId200AllOf = {
  data?: GetApiMusicId200AllOfData;
};

export type GetApiMusicId200 = SuccessResponse & GetApiMusicId200AllOf;

export type GetApiNotificationsStream200Type =
  (typeof GetApiNotificationsStream200Type)[keyof typeof GetApiNotificationsStream200Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsStream200Type = {
  scan: "scan",
  metadata: "metadata",
  sync: "sync",
  collection: "collection",
  settings: "settings",
  error: "error",
} as const;

export type GetApiNotificationsStream200Status =
  (typeof GetApiNotificationsStream200Status)[keyof typeof GetApiNotificationsStream200Status];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsStream200Status = {
  started: "started",
  progress: "progress",
  completed: "completed",
  failed: "failed",
} as const;

/**
 * Additional metadata about the event
 */
export type GetApiNotificationsStream200Data = { [key: string]: unknown };

export type GetApiNotificationsStream200 = {
  /** Unique notification ID */
  id?: string;
  type?: GetApiNotificationsStream200Type;
  status?: GetApiNotificationsStream200Status;
  /** Human-readable notification message */
  message?: string;
  timestamp?: string;
  /** Additional metadata about the event */
  data?: GetApiNotificationsStream200Data;
};

export type PostApiScanBody = {
  /** Absolute path to the directory to scan */
  path: string;
  mediaType: MediaType;
  /** Optional collection name (defaults to folder name) */
  collectionName?: string;
  /** If true, updates existing entries with new external IDs and metadata */
  updateExisting?: boolean;
};

export type PostApiScan200AllOfData = {
  message?: string;
  scan?: ScanResult;
};

export type PostApiScan200AllOf = {
  data?: PostApiScan200AllOfData;
};

export type PostApiScan200 = SuccessResponse & PostApiScan200AllOf;

export type PostApiScanSyncBody = {
  /** Name of the collection to sync */
  collectionName: string;
  mediaType: MediaType;
};

export type PostApiScanSync200AllOfData = {
  message?: string;
  sync?: SyncResult;
};

export type PostApiScanSync200AllOf = {
  data?: PostApiScanSync200AllOfData;
};

export type PostApiScanSync200 = SuccessResponse & PostApiScanSync200AllOf;

export type PostApiScanSyncAll200AllOfData = {
  message?: string;
  syncs?: SyncResult[];
};

export type PostApiScanSyncAll200AllOf = {
  data?: PostApiScanSyncAll200AllOfData;
};

export type PostApiScanSyncAll200 = SuccessResponse &
  PostApiScanSyncAll200AllOf;

export type GetApiSearchParams = {
  /**
   * Search query
   */
  q: string;
  /**
   * Filter results by type (optional)
   */
  type?: GetApiSearchType;
};

export type GetApiSearchType =
  (typeof GetApiSearchType)[keyof typeof GetApiSearchType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiSearchType = {
  media: "media",
  collections: "collections",
} as const;

export type GetApiSearch200AllOfData = {
  message?: string;
  query?: string;
  media?: Media[];
  collections?: Collection[];
  total?: number;
};

export type GetApiSearch200AllOf = {
  data?: GetApiSearch200AllOfData;
};

export type GetApiSearch200 = SuccessResponse & GetApiSearch200AllOf;

export type PatchApiSettingsBodyLibrariesItemType =
  (typeof PatchApiSettingsBodyLibrariesItemType)[keyof typeof PatchApiSettingsBodyLibrariesItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchApiSettingsBodyLibrariesItemType = {
  MOVIE: "MOVIE",
  TV_SHOW: "TV_SHOW",
  MUSIC: "MUSIC",
  COMIC: "COMIC",
} as const;

export type PatchApiSettingsBodyLibrariesItem = {
  name?: string;
  type?: PatchApiSettingsBodyLibrariesItemType;
  path?: string;
};

export type PatchApiSettingsBody = {
  libraries?: PatchApiSettingsBodyLibrariesItem[];
  tmdbApiKey?: string;
};

export type PostApiSettingsCompleteSetupBodyLibrariesItemType =
  (typeof PostApiSettingsCompleteSetupBodyLibrariesItemType)[keyof typeof PostApiSettingsCompleteSetupBodyLibrariesItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiSettingsCompleteSetupBodyLibrariesItemType = {
  MOVIE: "MOVIE",
  TV_SHOW: "TV_SHOW",
  MUSIC: "MUSIC",
  COMIC: "COMIC",
} as const;

export type PostApiSettingsCompleteSetupBodyLibrariesItem = {
  name: string;
  type: PostApiSettingsCompleteSetupBodyLibrariesItemType;
  path: string;
};

export type PostApiSettingsCompleteSetupBody = {
  libraries: PostApiSettingsCompleteSetupBodyLibrariesItem[];
  /** Required TMDB API key for metadata */
  tmdbApiKey: string;
};

export type GetApiTvShowsParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter TV shows released after this date
   */
  releasedAfter?: string;
  /**
   * Filter TV shows released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiTvShowsSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiTvShowsSortOrder;
};

export type GetApiTvShowsSortBy =
  (typeof GetApiTvShowsSortBy)[keyof typeof GetApiTvShowsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiTvShowsSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiTvShowsSortOrder =
  (typeof GetApiTvShowsSortOrder)[keyof typeof GetApiTvShowsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiTvShowsSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiTvShows200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiTvShows200AllOf = {
  data?: GetApiTvShows200AllOfData;
};

export type GetApiTvShows200 = SuccessResponse & GetApiTvShows200AllOf;

export type GetApiTvShowsId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiTvShowsId200AllOf = {
  data?: GetApiTvShowsId200AllOfData;
};

export type GetApiTvShowsId200 = SuccessResponse & GetApiTvShowsId200AllOf;

export type GetApiTvShowsIdSeasonsSeasonNumber200AllOfData = {
  message?: string;
  season?: Season;
};

export type GetApiTvShowsIdSeasonsSeasonNumber200AllOf = {
  data?: GetApiTvShowsIdSeasonsSeasonNumber200AllOfData;
};

export type GetApiTvShowsIdSeasonsSeasonNumber200 = SuccessResponse &
  GetApiTvShowsIdSeasonsSeasonNumber200AllOf;

export type GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOfData =
  {
    message?: string;
    episode?: Episode;
  };

export type GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOf = {
  data?: GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOfData;
};

export type GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200 =
  SuccessResponse &
    GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOf;
