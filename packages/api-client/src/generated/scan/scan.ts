/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  ErrorResponse,
  PostApiScan200,
  PostApiScanBody,
  PostApiScanSync200,
  PostApiScanSyncAll200,
  PostApiScanSyncBody,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * Recursively scans a directory and returns all media files matching the specified media type
 * @summary Scan a directory for media files
 */
export type postApiScanResponse200 = {
  data: PostApiScan200;
  status: 200;
};

export type postApiScanResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postApiScanResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type postApiScanResponseSuccess = postApiScanResponse200 & {
  headers: Headers;
};
export type postApiScanResponseError = (
  | postApiScanResponse400
  | postApiScanResponse404
) & {
  headers: Headers;
};

export type postApiScanResponse =
  | postApiScanResponseSuccess
  | postApiScanResponseError;

export const getPostApiScanUrl = () => {
  return `/api/scan`;
};

export const postApiScan = async (
  postApiScanBody: PostApiScanBody,
  options?: RequestInit,
): Promise<postApiScanResponse> => {
  return customFetcher<postApiScanResponse>(getPostApiScanUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postApiScanBody),
  });
};

/**
 * Checks for file modifications and removals in a collection
 * @summary Sync a collection
 */
export type postApiScanSyncResponse200 = {
  data: PostApiScanSync200;
  status: 200;
};

export type postApiScanSyncResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type postApiScanSyncResponseSuccess = postApiScanSyncResponse200 & {
  headers: Headers;
};
export type postApiScanSyncResponseError = postApiScanSyncResponse404 & {
  headers: Headers;
};

export type postApiScanSyncResponse =
  | postApiScanSyncResponseSuccess
  | postApiScanSyncResponseError;

export const getPostApiScanSyncUrl = () => {
  return `/api/scan/sync`;
};

export const postApiScanSync = async (
  postApiScanSyncBody: PostApiScanSyncBody,
  options?: RequestInit,
): Promise<postApiScanSyncResponse> => {
  return customFetcher<postApiScanSyncResponse>(getPostApiScanSyncUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postApiScanSyncBody),
  });
};

/**
 * Checks for file modifications and removals across all collections (for cron jobs)
 * @summary Sync all collections
 */
export type postApiScanSyncAllResponse200 = {
  data: PostApiScanSyncAll200;
  status: 200;
};

export type postApiScanSyncAllResponseSuccess =
  postApiScanSyncAllResponse200 & {
    headers: Headers;
  };
export type postApiScanSyncAllResponse = postApiScanSyncAllResponseSuccess;

export const getPostApiScanSyncAllUrl = () => {
  return `/api/scan/sync-all`;
};

export const postApiScanSyncAll = async (
  options?: RequestInit,
): Promise<postApiScanSyncAllResponse> => {
  return customFetcher<postApiScanSyncAllResponse>(getPostApiScanSyncAllUrl(), {
    ...options,
    method: "POST",
  });
};
