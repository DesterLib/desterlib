/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  DeleteApiCollectionsId200,
  ErrorResponse,
  GetApiCollections200,
  GetApiCollectionsSlugOrId200,
  GetApiCollectionsStatistics200,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * Retrieve all collections with media count and recent media
 * @summary Get all collections
 */
export type getApiCollectionsResponse200 = {
  data: GetApiCollections200;
  status: 200;
};

export type getApiCollectionsResponseSuccess = getApiCollectionsResponse200 & {
  headers: Headers;
};
export type getApiCollectionsResponse = getApiCollectionsResponseSuccess;

export const getGetApiCollectionsUrl = () => {
  return `/api/collections`;
};

export const getApiCollections = async (
  options?: RequestInit,
): Promise<getApiCollectionsResponse> => {
  return customFetcher<getApiCollectionsResponse>(getGetApiCollectionsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve statistics about collections
 * @summary Get collection statistics
 */
export type getApiCollectionsStatisticsResponse200 = {
  data: GetApiCollectionsStatistics200;
  status: 200;
};

export type getApiCollectionsStatisticsResponseSuccess =
  getApiCollectionsStatisticsResponse200 & {
    headers: Headers;
  };
export type getApiCollectionsStatisticsResponse =
  getApiCollectionsStatisticsResponseSuccess;

export const getGetApiCollectionsStatisticsUrl = () => {
  return `/api/collections/statistics`;
};

export const getApiCollectionsStatistics = async (
  options?: RequestInit,
): Promise<getApiCollectionsStatisticsResponse> => {
  return customFetcher<getApiCollectionsStatisticsResponse>(
    getGetApiCollectionsStatisticsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve all collections that are libraries
 * @summary Get all libraries
 */
export type getApiCollectionsLibrariesResponse200 = {
  data: void;
  status: 200;
};

export type getApiCollectionsLibrariesResponseSuccess =
  getApiCollectionsLibrariesResponse200 & {
    headers: Headers;
  };
export type getApiCollectionsLibrariesResponse =
  getApiCollectionsLibrariesResponseSuccess;

export const getGetApiCollectionsLibrariesUrl = () => {
  return `/api/collections/libraries`;
};

export const getApiCollectionsLibraries = async (
  options?: RequestInit,
): Promise<getApiCollectionsLibrariesResponse> => {
  return customFetcher<getApiCollectionsLibrariesResponse>(
    getGetApiCollectionsLibrariesUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a single collection with all its media
 * @summary Get a collection by slug or ID
 */
export type getApiCollectionsSlugOrIdResponse200 = {
  data: GetApiCollectionsSlugOrId200;
  status: 200;
};

export type getApiCollectionsSlugOrIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiCollectionsSlugOrIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiCollectionsSlugOrIdResponseSuccess =
  getApiCollectionsSlugOrIdResponse200 & {
    headers: Headers;
  };
export type getApiCollectionsSlugOrIdResponseError = (
  | getApiCollectionsSlugOrIdResponse400
  | getApiCollectionsSlugOrIdResponse404
) & {
  headers: Headers;
};

export type getApiCollectionsSlugOrIdResponse =
  | getApiCollectionsSlugOrIdResponseSuccess
  | getApiCollectionsSlugOrIdResponseError;

export const getGetApiCollectionsSlugOrIdUrl = (slugOrId: string) => {
  return `/api/collections/${slugOrId}`;
};

export const getApiCollectionsSlugOrId = async (
  slugOrId: string,
  options?: RequestInit,
): Promise<getApiCollectionsSlugOrIdResponse> => {
  return customFetcher<getApiCollectionsSlugOrIdResponse>(
    getGetApiCollectionsSlugOrIdUrl(slugOrId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Delete a collection and all its media relationships
 * @summary Delete a collection
 */
export type deleteApiCollectionsIdResponse200 = {
  data: DeleteApiCollectionsId200;
  status: 200;
};

export type deleteApiCollectionsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type deleteApiCollectionsIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type deleteApiCollectionsIdResponseSuccess =
  deleteApiCollectionsIdResponse200 & {
    headers: Headers;
  };
export type deleteApiCollectionsIdResponseError = (
  | deleteApiCollectionsIdResponse400
  | deleteApiCollectionsIdResponse404
) & {
  headers: Headers;
};

export type deleteApiCollectionsIdResponse =
  | deleteApiCollectionsIdResponseSuccess
  | deleteApiCollectionsIdResponseError;

export const getDeleteApiCollectionsIdUrl = (id: string) => {
  return `/api/collections/${id}`;
};

export const deleteApiCollectionsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteApiCollectionsIdResponse> => {
  return customFetcher<deleteApiCollectionsIdResponse>(
    getDeleteApiCollectionsIdUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};
