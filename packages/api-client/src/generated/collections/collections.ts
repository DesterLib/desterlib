/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import { customFetcher } from "../../core/fetcher";

/**
 * Retrieve all collections with media count and recent media
 * @summary Get all collections
 */
export type getApiV1CollectionsResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsResponseSuccess =
  getApiV1CollectionsResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsResponse = getApiV1CollectionsResponseSuccess;

export const getGetApiV1CollectionsUrl = () => {
  return `/api/v1/collections`;
};

export const getApiV1Collections = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsResponse> => {
  return customFetcher<getApiV1CollectionsResponse>(
    getGetApiV1CollectionsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve statistics about collections
 * @summary Get collection statistics
 */
export type getApiV1CollectionsStatisticsResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsStatisticsResponseSuccess =
  getApiV1CollectionsStatisticsResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsStatisticsResponse =
  getApiV1CollectionsStatisticsResponseSuccess;

export const getGetApiV1CollectionsStatisticsUrl = () => {
  return `/api/v1/collections/statistics`;
};

export const getApiV1CollectionsStatistics = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsStatisticsResponse> => {
  return customFetcher<getApiV1CollectionsStatisticsResponse>(
    getGetApiV1CollectionsStatisticsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve all collections that are libraries
 * @summary Get all libraries
 */
export type getApiV1CollectionsLibrariesResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsLibrariesResponseSuccess =
  getApiV1CollectionsLibrariesResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsLibrariesResponse =
  getApiV1CollectionsLibrariesResponseSuccess;

export const getGetApiV1CollectionsLibrariesUrl = () => {
  return `/api/v1/collections/libraries`;
};

export const getApiV1CollectionsLibraries = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsLibrariesResponse> => {
  return customFetcher<getApiV1CollectionsLibrariesResponse>(
    getGetApiV1CollectionsLibrariesUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a single collection with all its media
 * @summary Get a collection by slug or ID
 */
export type getApiV1CollectionsSlugOrIdResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsSlugOrIdResponse404 = {
  data: void;
  status: 404;
};

export type getApiV1CollectionsSlugOrIdResponseSuccess =
  getApiV1CollectionsSlugOrIdResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsSlugOrIdResponseError =
  getApiV1CollectionsSlugOrIdResponse404 & {
    headers: Headers;
  };

export type getApiV1CollectionsSlugOrIdResponse =
  | getApiV1CollectionsSlugOrIdResponseSuccess
  | getApiV1CollectionsSlugOrIdResponseError;

export const getGetApiV1CollectionsSlugOrIdUrl = (slugOrId: string) => {
  return `/api/v1/collections/${slugOrId}`;
};

export const getApiV1CollectionsSlugOrId = async (
  slugOrId: string,
  options?: RequestInit,
): Promise<getApiV1CollectionsSlugOrIdResponse> => {
  return customFetcher<getApiV1CollectionsSlugOrIdResponse>(
    getGetApiV1CollectionsSlugOrIdUrl(slugOrId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Delete a collection and all its media relationships
 * @summary Delete a collection
 */
export type deleteApiV1CollectionsIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteApiV1CollectionsIdResponse404 = {
  data: void;
  status: 404;
};

export type deleteApiV1CollectionsIdResponseSuccess =
  deleteApiV1CollectionsIdResponse200 & {
    headers: Headers;
  };
export type deleteApiV1CollectionsIdResponseError =
  deleteApiV1CollectionsIdResponse404 & {
    headers: Headers;
  };

export type deleteApiV1CollectionsIdResponse =
  | deleteApiV1CollectionsIdResponseSuccess
  | deleteApiV1CollectionsIdResponseError;

export const getDeleteApiV1CollectionsIdUrl = (id: string) => {
  return `/api/v1/collections/${id}`;
};

export const deleteApiV1CollectionsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteApiV1CollectionsIdResponse> => {
  return customFetcher<deleteApiV1CollectionsIdResponse>(
    getDeleteApiV1CollectionsIdUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};
