/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import { customFetcher } from "../core/fetcher";
export type SuccessResponseData = { [key: string]: unknown };

export interface SuccessResponse {
  success?: boolean;
  requestId?: string;
  data?: SuccessResponseData;
}

export type ErrorResponseError = {
  code?: string;
  message?: string;
};

export interface ErrorResponse {
  success?: boolean;
  requestId?: string;
  error?: ErrorResponseError;
}

/**
 * Type of media to scan
 */
export type MediaType = (typeof MediaType)[keyof typeof MediaType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MediaType = {
  MOVIE: "MOVIE",
  TV_SHOW: "TV_SHOW",
  MUSIC: "MUSIC",
  COMIC: "COMIC",
} as const;

export interface ScannedFile {
  path?: string;
  name?: string;
  size?: number;
  extension?: string;
  relativePath?: string;
}

export type ScanResultStats = {
  /** Number of new files added */
  added?: number;
  /** Number of files already existing */
  skipped?: number;
  /** Number of existing files updated */
  updated?: number;
};

export interface ScanResult {
  collectionName?: string;
  mediaType?: MediaType;
  scannedPath?: string;
  totalFiles?: number;
  files?: ScannedFile[];
  timestamp?: string;
  stats?: ScanResultStats;
}

export type SyncResultStats = {
  /** Number of files updated */
  updated?: number;
  /** Number of files removed */
  removed?: number;
  /** Number of files checked */
  checked?: number;
};

export interface SyncResult {
  collectionName?: string;
  mediaType?: MediaType;
  timestamp?: string;
  stats?: SyncResultStats;
}

export interface Pagination {
  /** Total number of items */
  total?: number;
  /** Number of items per page */
  limit?: number;
  /** Number of items skipped */
  offset?: number;
  /** Whether there are more items available */
  hasMore?: boolean;
}

export interface Media {
  id?: string;
  title?: string;
  type?: MediaType;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  posterUrl?: string | null;
  /** @nullable */
  backdropUrl?: string | null;
  /** @nullable */
  releaseDate?: string | null;
  /** @nullable */
  rating?: number | null;
  createdAt?: string;
  updatedAt?: string;
  /** @nullable */
  movie?: Movie;
  /** @nullable */
  tvShow?: TVShow;
  /** @nullable */
  music?: Music;
  /** @nullable */
  comic?: Comic;
  genres?: MediaGenre[];
  people?: MediaPerson[];
  collections?: MediaCollection[];
  externalIds?: ExternalId[];
}

export interface Movie {
  id?: string;
  /**
   * Duration in minutes
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  director?: string | null;
  /** @nullable */
  trailerUrl?: string | null;
  mediaId?: string;
}

export interface TVShow {
  id?: string;
  /** @nullable */
  creator?: string | null;
  /** @nullable */
  network?: string | null;
  mediaId?: string;
  seasons?: Season[];
}

export interface Season {
  id?: string;
  number?: number;
  tvShowId?: string;
  episodes?: Episode[];
}

export interface Episode {
  id?: string;
  title?: string;
  number?: number;
  /**
   * Duration in minutes
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  airDate?: string | null;
  /** @nullable */
  videoUrl?: string | null;
  seasonId?: string;
}

export interface Music {
  id?: string;
  artist?: string;
  /** @nullable */
  album?: string | null;
  /** @nullable */
  genre?: string | null;
  /**
   * Duration in seconds
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  trackUrl?: string | null;
  mediaId?: string;
}

export interface Comic {
  id?: string;
  /** @nullable */
  issue?: number | null;
  /** @nullable */
  volume?: string | null;
  /** @nullable */
  publisher?: string | null;
  /** @nullable */
  pages?: number | null;
  /** @nullable */
  fileUrl?: string | null;
  mediaId?: string;
}

export interface Genre {
  id?: string;
  name?: string;
  slug?: string;
  /** @nullable */
  description?: string | null;
}

export interface MediaGenre {
  id?: string;
  mediaId?: string;
  genreId?: string;
  genre?: Genre;
}

export interface Person {
  id?: string;
  name?: string;
  /** @nullable */
  bio?: string | null;
  /** @nullable */
  birthDate?: string | null;
  /** @nullable */
  profileUrl?: string | null;
}

export type MediaPersonRole =
  (typeof MediaPersonRole)[keyof typeof MediaPersonRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MediaPersonRole = {
  ACTOR: "ACTOR",
  DIRECTOR: "DIRECTOR",
  WRITER: "WRITER",
  PRODUCER: "PRODUCER",
  ARTIST: "ARTIST",
  COMPOSER: "COMPOSER",
  AUTHOR: "AUTHOR",
} as const;

export interface MediaPerson {
  id?: string;
  role?: MediaPersonRole;
  /** @nullable */
  character?: string | null;
  mediaId?: string;
  personId?: string;
  person?: Person;
}

export interface Collection {
  id?: string;
  name?: string;
  slug?: string;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  posterUrl?: string | null;
  /** @nullable */
  backdropUrl?: string | null;
  isLibrary?: boolean;
  /** @nullable */
  libraryPath?: string | null;
  /** @nullable */
  libraryType?: MediaType;
  mediaCount?: number;
}

export interface MediaCollection {
  id?: string;
  mediaId?: string;
  collectionId?: string;
  /** @nullable */
  order?: number | null;
  collection?: Collection;
}

export type ExternalIdSource =
  (typeof ExternalIdSource)[keyof typeof ExternalIdSource];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExternalIdSource = {
  TMDB: "TMDB",
  IMDB: "IMDB",
  TVDB: "TVDB",
  ANIDB: "ANIDB",
  MYANIMELIST: "MYANIMELIST",
  MUSICBRAINZ: "MUSICBRAINZ",
  SPOTIFY: "SPOTIFY",
  COMICVINE: "COMICVINE",
  OTHER: "OTHER",
} as const;

export interface ExternalId {
  id?: string;
  source?: ExternalIdSource;
  externalId?: string;
  mediaId?: string;
}

export interface Settings {
  id?: string;
  isSetupComplete?: boolean;
  /** @nullable */
  tmdbApiKey?: string | null;
  requireAuth?: boolean;
  allowRegistration?: boolean;
  /** Session duration in seconds */
  sessionDuration?: number;
  createdAt?: string;
  updatedAt?: string;
  libraries?: Collection[];
}

export type GetAdminAlertsHistoryParams = {
  limit?: number;
};

export type PostAuthRegisterBodyRole =
  (typeof PostAuthRegisterBodyRole)[keyof typeof PostAuthRegisterBodyRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthRegisterBodyRole = {
  ADMIN: "ADMIN",
  USER: "USER",
  GUEST: "GUEST",
} as const;

export type PostAuthRegisterBody = {
  username: string;
  email?: string;
  displayName?: string;
  password?: string;
  pin?: string;
  isPasswordless?: boolean;
  role?: PostAuthRegisterBodyRole;
};

export type PostAuthLoginBody = {
  username: string;
  password?: string;
  pin?: string;
};

export type PostAuthLoginPasswordlessBody = {
  username: string;
};

export type PostAuthRefreshBody = {
  refreshToken: string;
};

export type PostAuthLogoutBody = {
  refreshToken: string;
};

export type GetApiV1CollectionsLibraries200AllOfData = {
  message?: string;
  collections?: Collection[];
};

export type GetApiV1CollectionsLibraries200AllOf = {
  data?: GetApiV1CollectionsLibraries200AllOfData;
};

export type GetApiV1CollectionsLibraries200 = SuccessResponse &
  GetApiV1CollectionsLibraries200AllOf;

export type GetApiV1ComicsParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter comics released after this date
   */
  releasedAfter?: string;
  /**
   * Filter comics released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiV1ComicsSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiV1ComicsSortOrder;
};

export type GetApiV1ComicsSortBy =
  (typeof GetApiV1ComicsSortBy)[keyof typeof GetApiV1ComicsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1ComicsSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiV1ComicsSortOrder =
  (typeof GetApiV1ComicsSortOrder)[keyof typeof GetApiV1ComicsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1ComicsSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiV1Comics200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiV1Comics200AllOf = {
  data?: GetApiV1Comics200AllOfData;
};

export type GetApiV1Comics200 = SuccessResponse & GetApiV1Comics200AllOf;

export type GetApiComicsId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiComicsId200AllOf = {
  data?: GetApiComicsId200AllOfData;
};

export type GetApiComicsId200 = SuccessResponse & GetApiComicsId200AllOf;

export type GetApiV1MediaParams = {
  /**
   * Filter by media type
   */
  type?: MediaType;
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter media released after this date
   */
  releasedAfter?: string;
  /**
   * Filter media released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiV1MediaSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiV1MediaSortOrder;
};

export type GetApiV1MediaSortBy =
  (typeof GetApiV1MediaSortBy)[keyof typeof GetApiV1MediaSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1MediaSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiV1MediaSortOrder =
  (typeof GetApiV1MediaSortOrder)[keyof typeof GetApiV1MediaSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1MediaSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiV1Media200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiV1Media200AllOf = {
  data?: GetApiV1Media200AllOfData;
};

export type GetApiV1Media200 = SuccessResponse & GetApiV1Media200AllOf;

export type GetApiV1MediaStatistics200AllOfDataStatisticsByType = {
  movies?: number;
  tvShows?: number;
  music?: number;
  comics?: number;
};

export type GetApiV1MediaStatistics200AllOfDataStatistics = {
  total?: number;
  byType?: GetApiV1MediaStatistics200AllOfDataStatisticsByType;
};

export type GetApiV1MediaStatistics200AllOfData = {
  message?: string;
  statistics?: GetApiV1MediaStatistics200AllOfDataStatistics;
};

export type GetApiV1MediaStatistics200AllOf = {
  data?: GetApiV1MediaStatistics200AllOfData;
};

export type GetApiV1MediaStatistics200 = SuccessResponse &
  GetApiV1MediaStatistics200AllOf;

export type GetApiV1MediaId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiV1MediaId200AllOf = {
  data?: GetApiV1MediaId200AllOfData;
};

export type GetApiV1MediaId200 = SuccessResponse & GetApiV1MediaId200AllOf;

export type GetApiV1MoviesParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter movies released after this date
   */
  releasedAfter?: string;
  /**
   * Filter movies released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiV1MoviesSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiV1MoviesSortOrder;
};

export type GetApiV1MoviesSortBy =
  (typeof GetApiV1MoviesSortBy)[keyof typeof GetApiV1MoviesSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1MoviesSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiV1MoviesSortOrder =
  (typeof GetApiV1MoviesSortOrder)[keyof typeof GetApiV1MoviesSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1MoviesSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiV1Movies200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiV1Movies200AllOf = {
  data?: GetApiV1Movies200AllOfData;
};

export type GetApiV1Movies200 = SuccessResponse & GetApiV1Movies200AllOf;

export type GetApiV1MoviesId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiV1MoviesId200AllOf = {
  data?: GetApiV1MoviesId200AllOfData;
};

export type GetApiV1MoviesId200 = SuccessResponse & GetApiV1MoviesId200AllOf;

export type GetApiV1MusicParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter music released after this date
   */
  releasedAfter?: string;
  /**
   * Filter music released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiV1MusicSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiV1MusicSortOrder;
};

export type GetApiV1MusicSortBy =
  (typeof GetApiV1MusicSortBy)[keyof typeof GetApiV1MusicSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1MusicSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiV1MusicSortOrder =
  (typeof GetApiV1MusicSortOrder)[keyof typeof GetApiV1MusicSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1MusicSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiV1Music200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiV1Music200AllOf = {
  data?: GetApiV1Music200AllOfData;
};

export type GetApiV1Music200 = SuccessResponse & GetApiV1Music200AllOf;

export type GetApiMusicId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiMusicId200AllOf = {
  data?: GetApiMusicId200AllOfData;
};

export type GetApiMusicId200 = SuccessResponse & GetApiMusicId200AllOf;

export type GetApiNotificationsStream200Type =
  (typeof GetApiNotificationsStream200Type)[keyof typeof GetApiNotificationsStream200Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsStream200Type = {
  scan: "scan",
  metadata: "metadata",
  sync: "sync",
  collection: "collection",
  settings: "settings",
  error: "error",
} as const;

export type GetApiNotificationsStream200Status =
  (typeof GetApiNotificationsStream200Status)[keyof typeof GetApiNotificationsStream200Status];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsStream200Status = {
  started: "started",
  progress: "progress",
  completed: "completed",
  failed: "failed",
} as const;

/**
 * Additional metadata about the event
 */
export type GetApiNotificationsStream200Data = { [key: string]: unknown };

export type GetApiNotificationsStream200 = {
  /** Unique notification ID */
  id?: string;
  type?: GetApiNotificationsStream200Type;
  status?: GetApiNotificationsStream200Status;
  /** Human-readable notification message */
  message?: string;
  timestamp?: string;
  /** Additional metadata about the event */
  data?: GetApiNotificationsStream200Data;
};

export type PostApiV1ScanBody = {
  /** Absolute path to the directory to scan */
  path: string;
  mediaType: MediaType;
  /** Optional collection name (defaults to folder name) */
  collectionName?: string;
  /** If true, updates existing entries with new external IDs and metadata */
  updateExisting?: boolean;
};

export type PostApiV1Scan200AllOfData = {
  message?: string;
  scan?: ScanResult;
};

export type PostApiV1Scan200AllOf = {
  data?: PostApiV1Scan200AllOfData;
};

export type PostApiV1Scan200 = SuccessResponse & PostApiV1Scan200AllOf;

export type PostApiV1ScanSyncBody = {
  /** Name of the collection to sync */
  collectionName: string;
  mediaType: MediaType;
};

export type PostApiV1ScanSync200AllOfData = {
  message?: string;
  sync?: SyncResult;
};

export type PostApiV1ScanSync200AllOf = {
  data?: PostApiV1ScanSync200AllOfData;
};

export type PostApiV1ScanSync200 = SuccessResponse & PostApiV1ScanSync200AllOf;

export type PostApiV1ScanSyncAll200AllOfData = {
  message?: string;
  syncs?: SyncResult[];
};

export type PostApiV1ScanSyncAll200AllOf = {
  data?: PostApiV1ScanSyncAll200AllOfData;
};

export type PostApiV1ScanSyncAll200 = SuccessResponse &
  PostApiV1ScanSyncAll200AllOf;

export type GetApiV1SearchParams = {
  /**
   * Search query
   */
  q: string;
  /**
   * Filter results by type (optional)
   */
  type?: GetApiV1SearchType;
};

export type GetApiV1SearchType =
  (typeof GetApiV1SearchType)[keyof typeof GetApiV1SearchType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1SearchType = {
  media: "media",
  collections: "collections",
} as const;

export type GetApiV1Search200AllOfData = {
  message?: string;
  query?: string;
  media?: Media[];
  collections?: Collection[];
  total?: number;
};

export type GetApiV1Search200AllOf = {
  data?: GetApiV1Search200AllOfData;
};

export type GetApiV1Search200 = SuccessResponse & GetApiV1Search200AllOf;

export type GetApiV1Settings200AllOfData = {
  settings?: Settings;
};

export type GetApiV1Settings200AllOf = {
  data?: GetApiV1Settings200AllOfData;
};

export type GetApiV1Settings200 = SuccessResponse & GetApiV1Settings200AllOf;

export type PatchApiV1SettingsBodyLibrariesItem = {
  name?: string;
  type?: MediaType;
  path?: string;
};

export type PatchApiV1SettingsBody = {
  libraries?: PatchApiV1SettingsBodyLibrariesItem[];
  tmdbApiKey?: string;
};

export type PatchApiV1Settings200AllOfData = {
  settings?: Settings;
};

export type PatchApiV1Settings200AllOf = {
  data?: PatchApiV1Settings200AllOfData;
};

export type PatchApiV1Settings200 = SuccessResponse &
  PatchApiV1Settings200AllOf;

export type GetApiV1SettingsSetupStatus200AllOfData = {
  isSetupComplete?: boolean;
};

export type GetApiV1SettingsSetupStatus200AllOf = {
  data?: GetApiV1SettingsSetupStatus200AllOfData;
};

export type GetApiV1SettingsSetupStatus200 = SuccessResponse &
  GetApiV1SettingsSetupStatus200AllOf;

export type PostApiV1SettingsCompleteSetupBodyLibrariesItem = {
  name: string;
  type: MediaType;
  path: string;
};

export type PostApiV1SettingsCompleteSetupBody = {
  libraries: PostApiV1SettingsCompleteSetupBodyLibrariesItem[];
  /** Required TMDB API key for metadata */
  tmdbApiKey: string;
};

export type PostApiV1SettingsCompleteSetup200AllOfData = {
  settings?: Settings;
};

export type PostApiV1SettingsCompleteSetup200AllOf = {
  data?: PostApiV1SettingsCompleteSetup200AllOfData;
};

export type PostApiV1SettingsCompleteSetup200 = SuccessResponse &
  PostApiV1SettingsCompleteSetup200AllOf;

export type GetApiV1TvShowsParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter TV shows released after this date
   */
  releasedAfter?: string;
  /**
   * Filter TV shows released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiV1TvShowsSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiV1TvShowsSortOrder;
};

export type GetApiV1TvShowsSortBy =
  (typeof GetApiV1TvShowsSortBy)[keyof typeof GetApiV1TvShowsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1TvShowsSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiV1TvShowsSortOrder =
  (typeof GetApiV1TvShowsSortOrder)[keyof typeof GetApiV1TvShowsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiV1TvShowsSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiV1TvShows200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiV1TvShows200AllOf = {
  data?: GetApiV1TvShows200AllOfData;
};

export type GetApiV1TvShows200 = SuccessResponse & GetApiV1TvShows200AllOf;

export type GetApiV1TvShowsId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiV1TvShowsId200AllOf = {
  data?: GetApiV1TvShowsId200AllOfData;
};

export type GetApiV1TvShowsId200 = SuccessResponse & GetApiV1TvShowsId200AllOf;

export type GetApiV1TvShowsIdSeasonsSeasonNumber200AllOfData = {
  message?: string;
  season?: Season;
};

export type GetApiV1TvShowsIdSeasonsSeasonNumber200AllOf = {
  data?: GetApiV1TvShowsIdSeasonsSeasonNumber200AllOfData;
};

export type GetApiV1TvShowsIdSeasonsSeasonNumber200 = SuccessResponse &
  GetApiV1TvShowsIdSeasonsSeasonNumber200AllOf;

export type GetApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOfData =
  {
    message?: string;
    episode?: Episode;
  };

export type GetApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOf =
  {
    data?: GetApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOfData;
  };

export type GetApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200 =
  SuccessResponse &
    GetApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOf;

/**
 * @summary List all database backups
 */
export type getAdminBackupsResponse200 = {
  data: void;
  status: 200;
};

export type getAdminBackupsResponseSuccess = getAdminBackupsResponse200 & {
  headers: Headers;
};
export type getAdminBackupsResponse = getAdminBackupsResponseSuccess;

export const getGetAdminBackupsUrl = () => {
  return `/admin/backups`;
};

export const getAdminBackups = async (
  options?: RequestInit,
): Promise<getAdminBackupsResponse> => {
  return customFetcher<getAdminBackupsResponse>(getGetAdminBackupsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Create a new database backup
 */
export type postAdminBackupsResponse201 = {
  data: void;
  status: 201;
};

export type postAdminBackupsResponseSuccess = postAdminBackupsResponse201 & {
  headers: Headers;
};
export type postAdminBackupsResponse = postAdminBackupsResponseSuccess;

export const getPostAdminBackupsUrl = () => {
  return `/admin/backups`;
};

export const postAdminBackups = async (
  options?: RequestInit,
): Promise<postAdminBackupsResponse> => {
  return customFetcher<postAdminBackupsResponse>(getPostAdminBackupsUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Restore database from backup
 */
export type postAdminBackupsFilenameRestoreResponse200 = {
  data: void;
  status: 200;
};

export type postAdminBackupsFilenameRestoreResponseSuccess =
  postAdminBackupsFilenameRestoreResponse200 & {
    headers: Headers;
  };
export type postAdminBackupsFilenameRestoreResponse =
  postAdminBackupsFilenameRestoreResponseSuccess;

export const getPostAdminBackupsFilenameRestoreUrl = (filename: string) => {
  return `/admin/backups/${filename}/restore`;
};

export const postAdminBackupsFilenameRestore = async (
  filename: string,
  options?: RequestInit,
): Promise<postAdminBackupsFilenameRestoreResponse> => {
  return customFetcher<postAdminBackupsFilenameRestoreResponse>(
    getPostAdminBackupsFilenameRestoreUrl(filename),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Delete a backup file
 */
export type deleteAdminBackupsFilenameResponse200 = {
  data: void;
  status: 200;
};

export type deleteAdminBackupsFilenameResponseSuccess =
  deleteAdminBackupsFilenameResponse200 & {
    headers: Headers;
  };
export type deleteAdminBackupsFilenameResponse =
  deleteAdminBackupsFilenameResponseSuccess;

export const getDeleteAdminBackupsFilenameUrl = (filename: string) => {
  return `/admin/backups/${filename}`;
};

export const deleteAdminBackupsFilename = async (
  filename: string,
  options?: RequestInit,
): Promise<deleteAdminBackupsFilenameResponse> => {
  return customFetcher<deleteAdminBackupsFilenameResponse>(
    getDeleteAdminBackupsFilenameUrl(filename),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Manually update business metrics
 */
export type postAdminMetricsUpdateResponse200 = {
  data: void;
  status: 200;
};

export type postAdminMetricsUpdateResponseSuccess =
  postAdminMetricsUpdateResponse200 & {
    headers: Headers;
  };
export type postAdminMetricsUpdateResponse =
  postAdminMetricsUpdateResponseSuccess;

export const getPostAdminMetricsUpdateUrl = () => {
  return `/admin/metrics/update`;
};

export const postAdminMetricsUpdate = async (
  options?: RequestInit,
): Promise<postAdminMetricsUpdateResponse> => {
  return customFetcher<postAdminMetricsUpdateResponse>(
    getPostAdminMetricsUpdateUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Get active alerts
 */
export type getAdminAlertsResponse200 = {
  data: void;
  status: 200;
};

export type getAdminAlertsResponseSuccess = getAdminAlertsResponse200 & {
  headers: Headers;
};
export type getAdminAlertsResponse = getAdminAlertsResponseSuccess;

export const getGetAdminAlertsUrl = () => {
  return `/admin/alerts`;
};

export const getAdminAlerts = async (
  options?: RequestInit,
): Promise<getAdminAlertsResponse> => {
  return customFetcher<getAdminAlertsResponse>(getGetAdminAlertsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get alert history
 */
export type getAdminAlertsHistoryResponse200 = {
  data: void;
  status: 200;
};

export type getAdminAlertsHistoryResponseSuccess =
  getAdminAlertsHistoryResponse200 & {
    headers: Headers;
  };
export type getAdminAlertsHistoryResponse =
  getAdminAlertsHistoryResponseSuccess;

export const getGetAdminAlertsHistoryUrl = (
  params?: GetAdminAlertsHistoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/alerts/history?${stringifiedParams}`
    : `/admin/alerts/history`;
};

export const getAdminAlertsHistory = async (
  params?: GetAdminAlertsHistoryParams,
  options?: RequestInit,
): Promise<getAdminAlertsHistoryResponse> => {
  return customFetcher<getAdminAlertsHistoryResponse>(
    getGetAdminAlertsHistoryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Perform comprehensive health check
 */
export type getAdminHealthCheckResponse200 = {
  data: void;
  status: 200;
};

export type getAdminHealthCheckResponseSuccess =
  getAdminHealthCheckResponse200 & {
    headers: Headers;
  };
export type getAdminHealthCheckResponse = getAdminHealthCheckResponseSuccess;

export const getGetAdminHealthCheckUrl = () => {
  return `/admin/health/check`;
};

export const getAdminHealthCheck = async (
  options?: RequestInit,
): Promise<getAdminHealthCheckResponse> => {
  return customFetcher<getAdminHealthCheckResponse>(
    getGetAdminHealthCheckUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get performance statistics
 */
export type getAdminPerformanceResponse200 = {
  data: void;
  status: 200;
};

export type getAdminPerformanceResponseSuccess =
  getAdminPerformanceResponse200 & {
    headers: Headers;
  };
export type getAdminPerformanceResponse = getAdminPerformanceResponseSuccess;

export const getGetAdminPerformanceUrl = () => {
  return `/admin/performance`;
};

export const getAdminPerformance = async (
  options?: RequestInit,
): Promise<getAdminPerformanceResponse> => {
  return customFetcher<getAdminPerformanceResponse>(
    getGetAdminPerformanceUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Reset performance statistics
 */
export type postAdminPerformanceResetResponse200 = {
  data: void;
  status: 200;
};

export type postAdminPerformanceResetResponseSuccess =
  postAdminPerformanceResetResponse200 & {
    headers: Headers;
  };
export type postAdminPerformanceResetResponse =
  postAdminPerformanceResetResponseSuccess;

export const getPostAdminPerformanceResetUrl = () => {
  return `/admin/performance/reset`;
};

export const postAdminPerformanceReset = async (
  options?: RequestInit,
): Promise<postAdminPerformanceResetResponse> => {
  return customFetcher<postAdminPerformanceResetResponse>(
    getPostAdminPerformanceResetUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Register a new user
 */
export type postAuthRegisterResponse201 = {
  data: void;
  status: 201;
};

export type postAuthRegisterResponseSuccess = postAuthRegisterResponse201 & {
  headers: Headers;
};
export type postAuthRegisterResponse = postAuthRegisterResponseSuccess;

export const getPostAuthRegisterUrl = () => {
  return `/auth/register`;
};

export const postAuthRegister = async (
  postAuthRegisterBody: PostAuthRegisterBody,
  options?: RequestInit,
): Promise<postAuthRegisterResponse> => {
  return customFetcher<postAuthRegisterResponse>(getPostAuthRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthRegisterBody),
  });
};

/**
 * @summary Login with username and password or PIN
 */
export type postAuthLoginResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLoginResponseSuccess = postAuthLoginResponse200 & {
  headers: Headers;
};
export type postAuthLoginResponse = postAuthLoginResponseSuccess;

export const getPostAuthLoginUrl = () => {
  return `/auth/login`;
};

export const postAuthLogin = async (
  postAuthLoginBody: PostAuthLoginBody,
  options?: RequestInit,
): Promise<postAuthLoginResponse> => {
  return customFetcher<postAuthLoginResponse>(getPostAuthLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthLoginBody),
  });
};

/**
 * @summary Login without password (passwordless accounts only)
 */
export type postAuthLoginPasswordlessResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLoginPasswordlessResponseSuccess =
  postAuthLoginPasswordlessResponse200 & {
    headers: Headers;
  };
export type postAuthLoginPasswordlessResponse =
  postAuthLoginPasswordlessResponseSuccess;

export const getPostAuthLoginPasswordlessUrl = () => {
  return `/auth/login/passwordless`;
};

export const postAuthLoginPasswordless = async (
  postAuthLoginPasswordlessBody: PostAuthLoginPasswordlessBody,
  options?: RequestInit,
): Promise<postAuthLoginPasswordlessResponse> => {
  return customFetcher<postAuthLoginPasswordlessResponse>(
    getPostAuthLoginPasswordlessUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postAuthLoginPasswordlessBody),
    },
  );
};

/**
 * @summary Refresh access token
 */
export type postAuthRefreshResponse200 = {
  data: void;
  status: 200;
};

export type postAuthRefreshResponseSuccess = postAuthRefreshResponse200 & {
  headers: Headers;
};
export type postAuthRefreshResponse = postAuthRefreshResponseSuccess;

export const getPostAuthRefreshUrl = () => {
  return `/auth/refresh`;
};

export const postAuthRefresh = async (
  postAuthRefreshBody: PostAuthRefreshBody,
  options?: RequestInit,
): Promise<postAuthRefreshResponse> => {
  return customFetcher<postAuthRefreshResponse>(getPostAuthRefreshUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthRefreshBody),
  });
};

/**
 * @summary Logout current session
 */
export type postAuthLogoutResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLogoutResponseSuccess = postAuthLogoutResponse200 & {
  headers: Headers;
};
export type postAuthLogoutResponse = postAuthLogoutResponseSuccess;

export const getPostAuthLogoutUrl = () => {
  return `/auth/logout`;
};

export const postAuthLogout = async (
  postAuthLogoutBody: PostAuthLogoutBody,
  options?: RequestInit,
): Promise<postAuthLogoutResponse> => {
  return customFetcher<postAuthLogoutResponse>(getPostAuthLogoutUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthLogoutBody),
  });
};

/**
 * @summary Logout all sessions
 */
export type postAuthLogoutAllResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLogoutAllResponseSuccess = postAuthLogoutAllResponse200 & {
  headers: Headers;
};
export type postAuthLogoutAllResponse = postAuthLogoutAllResponseSuccess;

export const getPostAuthLogoutAllUrl = () => {
  return `/auth/logout-all`;
};

export const postAuthLogoutAll = async (
  options?: RequestInit,
): Promise<postAuthLogoutAllResponse> => {
  return customFetcher<postAuthLogoutAllResponse>(getPostAuthLogoutAllUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get current user information
 */
export type getAuthMeResponse200 = {
  data: void;
  status: 200;
};

export type getAuthMeResponseSuccess = getAuthMeResponse200 & {
  headers: Headers;
};
export type getAuthMeResponse = getAuthMeResponseSuccess;

export const getGetAuthMeUrl = () => {
  return `/auth/me`;
};

export const getAuthMe = async (
  options?: RequestInit,
): Promise<getAuthMeResponse> => {
  return customFetcher<getAuthMeResponse>(getGetAuthMeUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update current user
 */
export type putAuthMeResponse200 = {
  data: void;
  status: 200;
};

export type putAuthMeResponseSuccess = putAuthMeResponse200 & {
  headers: Headers;
};
export type putAuthMeResponse = putAuthMeResponseSuccess;

export const getPutAuthMeUrl = () => {
  return `/auth/me`;
};

export const putAuthMe = async (
  options?: RequestInit,
): Promise<putAuthMeResponse> => {
  return customFetcher<putAuthMeResponse>(getPutAuthMeUrl(), {
    ...options,
    method: "PUT",
  });
};

/**
 * @summary Change password
 */
export type postAuthChangePasswordResponse200 = {
  data: void;
  status: 200;
};

export type postAuthChangePasswordResponseSuccess =
  postAuthChangePasswordResponse200 & {
    headers: Headers;
  };
export type postAuthChangePasswordResponse =
  postAuthChangePasswordResponseSuccess;

export const getPostAuthChangePasswordUrl = () => {
  return `/auth/change-password`;
};

export const postAuthChangePassword = async (
  options?: RequestInit,
): Promise<postAuthChangePasswordResponse> => {
  return customFetcher<postAuthChangePasswordResponse>(
    getPostAuthChangePasswordUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Change PIN
 */
export type postAuthChangePinResponse200 = {
  data: void;
  status: 200;
};

export type postAuthChangePinResponseSuccess = postAuthChangePinResponse200 & {
  headers: Headers;
};
export type postAuthChangePinResponse = postAuthChangePinResponseSuccess;

export const getPostAuthChangePinUrl = () => {
  return `/auth/change-pin`;
};

export const postAuthChangePin = async (
  options?: RequestInit,
): Promise<postAuthChangePinResponse> => {
  return customFetcher<postAuthChangePinResponse>(getPostAuthChangePinUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get all active sessions
 */
export type getAuthSessionsResponse200 = {
  data: void;
  status: 200;
};

export type getAuthSessionsResponseSuccess = getAuthSessionsResponse200 & {
  headers: Headers;
};
export type getAuthSessionsResponse = getAuthSessionsResponseSuccess;

export const getGetAuthSessionsUrl = () => {
  return `/auth/sessions`;
};

export const getAuthSessions = async (
  options?: RequestInit,
): Promise<getAuthSessionsResponse> => {
  return customFetcher<getAuthSessionsResponse>(getGetAuthSessionsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Revoke a specific session
 */
export type deleteAuthSessionsSessionIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteAuthSessionsSessionIdResponseSuccess =
  deleteAuthSessionsSessionIdResponse200 & {
    headers: Headers;
  };
export type deleteAuthSessionsSessionIdResponse =
  deleteAuthSessionsSessionIdResponseSuccess;

export const getDeleteAuthSessionsSessionIdUrl = (sessionId: string) => {
  return `/auth/sessions/${sessionId}`;
};

export const deleteAuthSessionsSessionId = async (
  sessionId: string,
  options?: RequestInit,
): Promise<deleteAuthSessionsSessionIdResponse> => {
  return customFetcher<deleteAuthSessionsSessionIdResponse>(
    getDeleteAuthSessionsSessionIdUrl(sessionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary List all API keys
 */
export type getAuthApiKeysResponse200 = {
  data: void;
  status: 200;
};

export type getAuthApiKeysResponseSuccess = getAuthApiKeysResponse200 & {
  headers: Headers;
};
export type getAuthApiKeysResponse = getAuthApiKeysResponseSuccess;

export const getGetAuthApiKeysUrl = () => {
  return `/auth/api-keys`;
};

export const getAuthApiKeys = async (
  options?: RequestInit,
): Promise<getAuthApiKeysResponse> => {
  return customFetcher<getAuthApiKeysResponse>(getGetAuthApiKeysUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Create a new API key
 */
export type postAuthApiKeysResponse201 = {
  data: void;
  status: 201;
};

export type postAuthApiKeysResponseSuccess = postAuthApiKeysResponse201 & {
  headers: Headers;
};
export type postAuthApiKeysResponse = postAuthApiKeysResponseSuccess;

export const getPostAuthApiKeysUrl = () => {
  return `/auth/api-keys`;
};

export const postAuthApiKeys = async (
  options?: RequestInit,
): Promise<postAuthApiKeysResponse> => {
  return customFetcher<postAuthApiKeysResponse>(getPostAuthApiKeysUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get a specific API key
 */
export type getAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type getAuthApiKeysKeyIdResponseSuccess =
  getAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type getAuthApiKeysKeyIdResponse = getAuthApiKeysKeyIdResponseSuccess;

export const getGetAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const getAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<getAuthApiKeysKeyIdResponse> => {
  return customFetcher<getAuthApiKeysKeyIdResponse>(
    getGetAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update an API key
 */
export type putAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type putAuthApiKeysKeyIdResponseSuccess =
  putAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type putAuthApiKeysKeyIdResponse = putAuthApiKeysKeyIdResponseSuccess;

export const getPutAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const putAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<putAuthApiKeysKeyIdResponse> => {
  return customFetcher<putAuthApiKeysKeyIdResponse>(
    getPutAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Delete an API key
 */
export type deleteAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteAuthApiKeysKeyIdResponseSuccess =
  deleteAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type deleteAuthApiKeysKeyIdResponse =
  deleteAuthApiKeysKeyIdResponseSuccess;

export const getDeleteAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const deleteAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<deleteAuthApiKeysKeyIdResponse> => {
  return customFetcher<deleteAuthApiKeysKeyIdResponse>(
    getDeleteAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Revoke an API key
 */
export type postAuthApiKeysKeyIdRevokeResponse200 = {
  data: void;
  status: 200;
};

export type postAuthApiKeysKeyIdRevokeResponseSuccess =
  postAuthApiKeysKeyIdRevokeResponse200 & {
    headers: Headers;
  };
export type postAuthApiKeysKeyIdRevokeResponse =
  postAuthApiKeysKeyIdRevokeResponseSuccess;

export const getPostAuthApiKeysKeyIdRevokeUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}/revoke`;
};

export const postAuthApiKeysKeyIdRevoke = async (
  keyId: string,
  options?: RequestInit,
): Promise<postAuthApiKeysKeyIdRevokeResponse> => {
  return customFetcher<postAuthApiKeysKeyIdRevokeResponse>(
    getPostAuthApiKeysKeyIdRevokeUrl(keyId),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary List all users (admin only)
 */
export type getUsersResponse200 = {
  data: void;
  status: 200;
};

export type getUsersResponseSuccess = getUsersResponse200 & {
  headers: Headers;
};
export type getUsersResponse = getUsersResponseSuccess;

export const getGetUsersUrl = () => {
  return `/users`;
};

export const getUsers = async (
  options?: RequestInit,
): Promise<getUsersResponse> => {
  return customFetcher<getUsersResponse>(getGetUsersUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get user by ID (admin only)
 */
export type getUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type getUsersUserIdResponseSuccess = getUsersUserIdResponse200 & {
  headers: Headers;
};
export type getUsersUserIdResponse = getUsersUserIdResponseSuccess;

export const getGetUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const getUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<getUsersUserIdResponse> => {
  return customFetcher<getUsersUserIdResponse>(getGetUsersUserIdUrl(userId), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update user (admin only)
 */
export type putUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type putUsersUserIdResponseSuccess = putUsersUserIdResponse200 & {
  headers: Headers;
};
export type putUsersUserIdResponse = putUsersUserIdResponseSuccess;

export const getPutUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const putUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<putUsersUserIdResponse> => {
  return customFetcher<putUsersUserIdResponse>(getPutUsersUserIdUrl(userId), {
    ...options,
    method: "PUT",
  });
};

/**
 * @summary Delete user (admin only)
 */
export type deleteUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteUsersUserIdResponseSuccess = deleteUsersUserIdResponse200 & {
  headers: Headers;
};
export type deleteUsersUserIdResponse = deleteUsersUserIdResponseSuccess;

export const getDeleteUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const deleteUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<deleteUsersUserIdResponse> => {
  return customFetcher<deleteUsersUserIdResponse>(
    getDeleteUsersUserIdUrl(userId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Retrieve all collections with media count and recent media
 * @summary Get all collections
 */
export type getApiV1CollectionsResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsResponseSuccess =
  getApiV1CollectionsResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsResponse = getApiV1CollectionsResponseSuccess;

export const getGetApiV1CollectionsUrl = () => {
  return `/api/v1/collections`;
};

export const getApiV1Collections = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsResponse> => {
  return customFetcher<getApiV1CollectionsResponse>(
    getGetApiV1CollectionsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve statistics about collections
 * @summary Get collection statistics
 */
export type getApiV1CollectionsStatisticsResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsStatisticsResponseSuccess =
  getApiV1CollectionsStatisticsResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsStatisticsResponse =
  getApiV1CollectionsStatisticsResponseSuccess;

export const getGetApiV1CollectionsStatisticsUrl = () => {
  return `/api/v1/collections/statistics`;
};

export const getApiV1CollectionsStatistics = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsStatisticsResponse> => {
  return customFetcher<getApiV1CollectionsStatisticsResponse>(
    getGetApiV1CollectionsStatisticsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve all collections that are libraries
 * @summary Get all libraries
 */
export type getApiV1CollectionsLibrariesResponse200 = {
  data: GetApiV1CollectionsLibraries200;
  status: 200;
};

export type getApiV1CollectionsLibrariesResponseSuccess =
  getApiV1CollectionsLibrariesResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsLibrariesResponse =
  getApiV1CollectionsLibrariesResponseSuccess;

export const getGetApiV1CollectionsLibrariesUrl = () => {
  return `/api/v1/collections/libraries`;
};

export const getApiV1CollectionsLibraries = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsLibrariesResponse> => {
  return customFetcher<getApiV1CollectionsLibrariesResponse>(
    getGetApiV1CollectionsLibrariesUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a single collection with all its media
 * @summary Get a collection by slug or ID
 */
export type getApiV1CollectionsSlugOrIdResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsSlugOrIdResponse404 = {
  data: void;
  status: 404;
};

export type getApiV1CollectionsSlugOrIdResponseSuccess =
  getApiV1CollectionsSlugOrIdResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsSlugOrIdResponseError =
  getApiV1CollectionsSlugOrIdResponse404 & {
    headers: Headers;
  };

export type getApiV1CollectionsSlugOrIdResponse =
  | getApiV1CollectionsSlugOrIdResponseSuccess
  | getApiV1CollectionsSlugOrIdResponseError;

export const getGetApiV1CollectionsSlugOrIdUrl = (slugOrId: string) => {
  return `/api/v1/collections/${slugOrId}`;
};

export const getApiV1CollectionsSlugOrId = async (
  slugOrId: string,
  options?: RequestInit,
): Promise<getApiV1CollectionsSlugOrIdResponse> => {
  return customFetcher<getApiV1CollectionsSlugOrIdResponse>(
    getGetApiV1CollectionsSlugOrIdUrl(slugOrId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Delete a collection and all its media relationships
 * @summary Delete a collection
 */
export type deleteApiV1CollectionsIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteApiV1CollectionsIdResponse404 = {
  data: void;
  status: 404;
};

export type deleteApiV1CollectionsIdResponseSuccess =
  deleteApiV1CollectionsIdResponse200 & {
    headers: Headers;
  };
export type deleteApiV1CollectionsIdResponseError =
  deleteApiV1CollectionsIdResponse404 & {
    headers: Headers;
  };

export type deleteApiV1CollectionsIdResponse =
  | deleteApiV1CollectionsIdResponseSuccess
  | deleteApiV1CollectionsIdResponseError;

export const getDeleteApiV1CollectionsIdUrl = (id: string) => {
  return `/api/v1/collections/${id}`;
};

export const deleteApiV1CollectionsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteApiV1CollectionsIdResponse> => {
  return customFetcher<deleteApiV1CollectionsIdResponse>(
    getDeleteApiV1CollectionsIdUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Retrieve all comics with optional filtering, sorting, and pagination
 * @summary Get all comics
 */
export type getApiV1ComicsResponse200 = {
  data: GetApiV1Comics200;
  status: 200;
};

export type getApiV1ComicsResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiV1ComicsResponseSuccess = getApiV1ComicsResponse200 & {
  headers: Headers;
};
export type getApiV1ComicsResponseError = getApiV1ComicsResponse400 & {
  headers: Headers;
};

export type getApiV1ComicsResponse =
  | getApiV1ComicsResponseSuccess
  | getApiV1ComicsResponseError;

export const getGetApiV1ComicsUrl = (params?: GetApiV1ComicsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/comics?${stringifiedParams}`
    : `/api/v1/comics`;
};

export const getApiV1Comics = async (
  params?: GetApiV1ComicsParams,
  options?: RequestInit,
): Promise<getApiV1ComicsResponse> => {
  return customFetcher<getApiV1ComicsResponse>(getGetApiV1ComicsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific comic by its ID
 * @summary Get comic by ID
 */
export type getApiComicsIdResponse200 = {
  data: GetApiComicsId200;
  status: 200;
};

export type getApiComicsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiComicsIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiComicsIdResponseSuccess = getApiComicsIdResponse200 & {
  headers: Headers;
};
export type getApiComicsIdResponseError = (
  | getApiComicsIdResponse400
  | getApiComicsIdResponse404
) & {
  headers: Headers;
};

export type getApiComicsIdResponse =
  | getApiComicsIdResponseSuccess
  | getApiComicsIdResponseError;

export const getGetApiComicsIdUrl = (id: string) => {
  return `/api/comics/${id}`;
};

export const getApiComicsId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiComicsIdResponse> => {
  return customFetcher<getApiComicsIdResponse>(getGetApiComicsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Basic health check endpoint
 * @summary Health check
 */
export type getHealthResponse200 = {
  data: void;
  status: 200;
};

export type getHealthResponseSuccess = getHealthResponse200 & {
  headers: Headers;
};
export type getHealthResponse = getHealthResponseSuccess;

export const getGetHealthUrl = () => {
  return `/health`;
};

export const getHealth = async (
  options?: RequestInit,
): Promise<getHealthResponse> => {
  return customFetcher<getHealthResponse>(getGetHealthUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Checks if service and all dependencies are ready
 * @summary Readiness check
 */
export type getHealthReadyResponse200 = {
  data: void;
  status: 200;
};

export type getHealthReadyResponse503 = {
  data: void;
  status: 503;
};

export type getHealthReadyResponseSuccess = getHealthReadyResponse200 & {
  headers: Headers;
};
export type getHealthReadyResponseError = getHealthReadyResponse503 & {
  headers: Headers;
};

export type getHealthReadyResponse =
  | getHealthReadyResponseSuccess
  | getHealthReadyResponseError;

export const getGetHealthReadyUrl = () => {
  return `/health/ready`;
};

export const getHealthReady = async (
  options?: RequestInit,
): Promise<getHealthReadyResponse> => {
  return customFetcher<getHealthReadyResponse>(getGetHealthReadyUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Checks if the process is alive
 * @summary Liveness check
 */
export type getHealthLiveResponse200 = {
  data: void;
  status: 200;
};

export type getHealthLiveResponseSuccess = getHealthLiveResponse200 & {
  headers: Headers;
};
export type getHealthLiveResponse = getHealthLiveResponseSuccess;

export const getGetHealthLiveUrl = () => {
  return `/health/live`;
};

export const getHealthLive = async (
  options?: RequestInit,
): Promise<getHealthLiveResponse> => {
  return customFetcher<getHealthLiveResponse>(getGetHealthLiveUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve all media items with optional filtering, sorting, and pagination
 * @summary Get all media
 */
export type getApiV1MediaResponse200 = {
  data: GetApiV1Media200;
  status: 200;
};

export type getApiV1MediaResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiV1MediaResponseSuccess = getApiV1MediaResponse200 & {
  headers: Headers;
};
export type getApiV1MediaResponseError = getApiV1MediaResponse400 & {
  headers: Headers;
};

export type getApiV1MediaResponse =
  | getApiV1MediaResponseSuccess
  | getApiV1MediaResponseError;

export const getGetApiV1MediaUrl = (params?: GetApiV1MediaParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/media?${stringifiedParams}`
    : `/api/v1/media`;
};

export const getApiV1Media = async (
  params?: GetApiV1MediaParams,
  options?: RequestInit,
): Promise<getApiV1MediaResponse> => {
  return customFetcher<getApiV1MediaResponse>(getGetApiV1MediaUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve statistics about media in the library
 * @summary Get media statistics
 */
export type getApiV1MediaStatisticsResponse200 = {
  data: GetApiV1MediaStatistics200;
  status: 200;
};

export type getApiV1MediaStatisticsResponseSuccess =
  getApiV1MediaStatisticsResponse200 & {
    headers: Headers;
  };
export type getApiV1MediaStatisticsResponse =
  getApiV1MediaStatisticsResponseSuccess;

export const getGetApiV1MediaStatisticsUrl = () => {
  return `/api/v1/media/statistics`;
};

export const getApiV1MediaStatistics = async (
  options?: RequestInit,
): Promise<getApiV1MediaStatisticsResponse> => {
  return customFetcher<getApiV1MediaStatisticsResponse>(
    getGetApiV1MediaStatisticsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a specific media item by its ID
 * @summary Get media by ID
 */
export type getApiV1MediaIdResponse200 = {
  data: GetApiV1MediaId200;
  status: 200;
};

export type getApiV1MediaIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiV1MediaIdResponseSuccess = getApiV1MediaIdResponse200 & {
  headers: Headers;
};
export type getApiV1MediaIdResponseError = getApiV1MediaIdResponse404 & {
  headers: Headers;
};

export type getApiV1MediaIdResponse =
  | getApiV1MediaIdResponseSuccess
  | getApiV1MediaIdResponseError;

export const getGetApiV1MediaIdUrl = (id: string) => {
  return `/api/v1/media/${id}`;
};

export const getApiV1MediaId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiV1MediaIdResponse> => {
  return customFetcher<getApiV1MediaIdResponse>(getGetApiV1MediaIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Stream a movie file with byte-range support for seeking
 * @summary Stream a movie
 */
export type getApiV1MediaStreamMovieIdResponse200 = {
  data: Blob;
  status: 200;
};

export type getApiV1MediaStreamMovieIdResponse206 = {
  data: Blob;
  status: 206;
};

export type getApiV1MediaStreamMovieIdResponse404 = {
  data: void;
  status: 404;
};

export type getApiV1MediaStreamMovieIdResponseSuccess = (
  | getApiV1MediaStreamMovieIdResponse200
  | getApiV1MediaStreamMovieIdResponse206
) & {
  headers: Headers;
};
export type getApiV1MediaStreamMovieIdResponseError =
  getApiV1MediaStreamMovieIdResponse404 & {
    headers: Headers;
  };

export type getApiV1MediaStreamMovieIdResponse =
  | getApiV1MediaStreamMovieIdResponseSuccess
  | getApiV1MediaStreamMovieIdResponseError;

export const getGetApiV1MediaStreamMovieIdUrl = (id: string) => {
  return `/api/v1/media/stream/movie/${id}`;
};

export const getApiV1MediaStreamMovieId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiV1MediaStreamMovieIdResponse> => {
  return customFetcher<getApiV1MediaStreamMovieIdResponse>(
    getGetApiV1MediaStreamMovieIdUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Stream a TV episode file with byte-range support for seeking
 * @summary Stream a TV episode
 */
export type getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse200 = {
  data: Blob;
  status: 200;
};

export type getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse206 = {
  data: Blob;
  status: 206;
};

export type getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse404 = {
  data: void;
  status: 404;
};

export type getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseSuccess =
  (
    | getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse200
    | getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse206
  ) & {
    headers: Headers;
  };
export type getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseError =
  getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse404 & {
    headers: Headers;
  };

export type getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse =
  | getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseSuccess
  | getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseError;

export const getGetApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberUrl = (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
) => {
  return `/api/v1/media/stream/episode/${id}/${seasonNumber}/${episodeNumber}`;
};

export const getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumber = async (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
  options?: RequestInit,
): Promise<getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse> => {
  return customFetcher<getApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse>(
    getGetApiV1MediaStreamEpisodeIdSeasonNumberEpisodeNumberUrl(
      id,
      seasonNumber,
      episodeNumber,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve all movies with optional filtering, sorting, and pagination
 * @summary Get all movies
 */
export type getApiV1MoviesResponse200 = {
  data: GetApiV1Movies200;
  status: 200;
};

export type getApiV1MoviesResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiV1MoviesResponseSuccess = getApiV1MoviesResponse200 & {
  headers: Headers;
};
export type getApiV1MoviesResponseError = getApiV1MoviesResponse400 & {
  headers: Headers;
};

export type getApiV1MoviesResponse =
  | getApiV1MoviesResponseSuccess
  | getApiV1MoviesResponseError;

export const getGetApiV1MoviesUrl = (params?: GetApiV1MoviesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/movies?${stringifiedParams}`
    : `/api/v1/movies`;
};

export const getApiV1Movies = async (
  params?: GetApiV1MoviesParams,
  options?: RequestInit,
): Promise<getApiV1MoviesResponse> => {
  return customFetcher<getApiV1MoviesResponse>(getGetApiV1MoviesUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific movie by its ID
 * @summary Get movie by ID
 */
export type getApiV1MoviesIdResponse200 = {
  data: GetApiV1MoviesId200;
  status: 200;
};

export type getApiV1MoviesIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiV1MoviesIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiV1MoviesIdResponseSuccess = getApiV1MoviesIdResponse200 & {
  headers: Headers;
};
export type getApiV1MoviesIdResponseError = (
  | getApiV1MoviesIdResponse400
  | getApiV1MoviesIdResponse404
) & {
  headers: Headers;
};

export type getApiV1MoviesIdResponse =
  | getApiV1MoviesIdResponseSuccess
  | getApiV1MoviesIdResponseError;

export const getGetApiV1MoviesIdUrl = (id: string) => {
  return `/api/v1/movies/${id}`;
};

export const getApiV1MoviesId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiV1MoviesIdResponse> => {
  return customFetcher<getApiV1MoviesIdResponse>(getGetApiV1MoviesIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve all music items with optional filtering, sorting, and pagination
 * @summary Get all music
 */
export type getApiV1MusicResponse200 = {
  data: GetApiV1Music200;
  status: 200;
};

export type getApiV1MusicResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiV1MusicResponseSuccess = getApiV1MusicResponse200 & {
  headers: Headers;
};
export type getApiV1MusicResponseError = getApiV1MusicResponse400 & {
  headers: Headers;
};

export type getApiV1MusicResponse =
  | getApiV1MusicResponseSuccess
  | getApiV1MusicResponseError;

export const getGetApiV1MusicUrl = (params?: GetApiV1MusicParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/music?${stringifiedParams}`
    : `/api/v1/music`;
};

export const getApiV1Music = async (
  params?: GetApiV1MusicParams,
  options?: RequestInit,
): Promise<getApiV1MusicResponse> => {
  return customFetcher<getApiV1MusicResponse>(getGetApiV1MusicUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific music item by its ID
 * @summary Get music by ID
 */
export type getApiMusicIdResponse200 = {
  data: GetApiMusicId200;
  status: 200;
};

export type getApiMusicIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMusicIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiMusicIdResponseSuccess = getApiMusicIdResponse200 & {
  headers: Headers;
};
export type getApiMusicIdResponseError = (
  | getApiMusicIdResponse400
  | getApiMusicIdResponse404
) & {
  headers: Headers;
};

export type getApiMusicIdResponse =
  | getApiMusicIdResponseSuccess
  | getApiMusicIdResponseError;

export const getGetApiMusicIdUrl = (id: string) => {
  return `/api/music/${id}`;
};

export const getApiMusicId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMusicIdResponse> => {
  return customFetcher<getApiMusicIdResponse>(getGetApiMusicIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Server-Sent Events (SSE) endpoint for receiving real-time notifications about scan, metadata, sync operations
 * @summary Real-time notification stream
 */
export type getApiNotificationsStreamResponse200 = {
  data: GetApiNotificationsStream200;
  status: 200;
};

export type getApiNotificationsStreamResponseSuccess =
  getApiNotificationsStreamResponse200 & {
    headers: Headers;
  };
export type getApiNotificationsStreamResponse =
  getApiNotificationsStreamResponseSuccess;

export const getGetApiNotificationsStreamUrl = () => {
  return `/api/notifications/stream`;
};

export const getApiNotificationsStream = async (
  options?: RequestInit,
): Promise<getApiNotificationsStreamResponse> => {
  return customFetcher<getApiNotificationsStreamResponse>(
    getGetApiNotificationsStreamUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Recursively scans a directory and returns all media files matching the specified media type
 * @summary Scan a directory for media files
 */
export type postApiV1ScanResponse200 = {
  data: PostApiV1Scan200;
  status: 200;
};

export type postApiV1ScanResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postApiV1ScanResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type postApiV1ScanResponseSuccess = postApiV1ScanResponse200 & {
  headers: Headers;
};
export type postApiV1ScanResponseError = (
  | postApiV1ScanResponse400
  | postApiV1ScanResponse404
) & {
  headers: Headers;
};

export type postApiV1ScanResponse =
  | postApiV1ScanResponseSuccess
  | postApiV1ScanResponseError;

export const getPostApiV1ScanUrl = () => {
  return `/api/v1/scan`;
};

export const postApiV1Scan = async (
  postApiV1ScanBody: PostApiV1ScanBody,
  options?: RequestInit,
): Promise<postApiV1ScanResponse> => {
  return customFetcher<postApiV1ScanResponse>(getPostApiV1ScanUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postApiV1ScanBody),
  });
};

/**
 * Checks for file modifications and removals in a collection
 * @summary Sync a collection
 */
export type postApiV1ScanSyncResponse200 = {
  data: PostApiV1ScanSync200;
  status: 200;
};

export type postApiV1ScanSyncResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type postApiV1ScanSyncResponseSuccess = postApiV1ScanSyncResponse200 & {
  headers: Headers;
};
export type postApiV1ScanSyncResponseError = postApiV1ScanSyncResponse404 & {
  headers: Headers;
};

export type postApiV1ScanSyncResponse =
  | postApiV1ScanSyncResponseSuccess
  | postApiV1ScanSyncResponseError;

export const getPostApiV1ScanSyncUrl = () => {
  return `/api/v1/scan/sync`;
};

export const postApiV1ScanSync = async (
  postApiV1ScanSyncBody: PostApiV1ScanSyncBody,
  options?: RequestInit,
): Promise<postApiV1ScanSyncResponse> => {
  return customFetcher<postApiV1ScanSyncResponse>(getPostApiV1ScanSyncUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postApiV1ScanSyncBody),
  });
};

/**
 * Checks for file modifications and removals across all collections (for cron jobs)
 * @summary Sync all collections
 */
export type postApiV1ScanSyncAllResponse200 = {
  data: PostApiV1ScanSyncAll200;
  status: 200;
};

export type postApiV1ScanSyncAllResponseSuccess =
  postApiV1ScanSyncAllResponse200 & {
    headers: Headers;
  };
export type postApiV1ScanSyncAllResponse = postApiV1ScanSyncAllResponseSuccess;

export const getPostApiV1ScanSyncAllUrl = () => {
  return `/api/v1/scan/sync-all`;
};

export const postApiV1ScanSyncAll = async (
  options?: RequestInit,
): Promise<postApiV1ScanSyncAllResponse> => {
  return customFetcher<postApiV1ScanSyncAllResponse>(
    getPostApiV1ScanSyncAllUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * Search for media and collections by title/name
 * @summary Search across all content
 */
export type getApiV1SearchResponse200 = {
  data: GetApiV1Search200;
  status: 200;
};

export type getApiV1SearchResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiV1SearchResponseSuccess = getApiV1SearchResponse200 & {
  headers: Headers;
};
export type getApiV1SearchResponseError = getApiV1SearchResponse400 & {
  headers: Headers;
};

export type getApiV1SearchResponse =
  | getApiV1SearchResponseSuccess
  | getApiV1SearchResponseError;

export const getGetApiV1SearchUrl = (params: GetApiV1SearchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/search?${stringifiedParams}`
    : `/api/v1/search`;
};

export const getApiV1Search = async (
  params: GetApiV1SearchParams,
  options?: RequestInit,
): Promise<getApiV1SearchResponse> => {
  return customFetcher<getApiV1SearchResponse>(getGetApiV1SearchUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get current settings
 */
export type getApiV1SettingsResponse200 = {
  data: GetApiV1Settings200;
  status: 200;
};

export type getApiV1SettingsResponseSuccess = getApiV1SettingsResponse200 & {
  headers: Headers;
};
export type getApiV1SettingsResponse = getApiV1SettingsResponseSuccess;

export const getGetApiV1SettingsUrl = () => {
  return `/api/v1/settings`;
};

export const getApiV1Settings = async (
  options?: RequestInit,
): Promise<getApiV1SettingsResponse> => {
  return customFetcher<getApiV1SettingsResponse>(getGetApiV1SettingsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update settings
 */
export type patchApiV1SettingsResponse200 = {
  data: PatchApiV1Settings200;
  status: 200;
};

export type patchApiV1SettingsResponseSuccess =
  patchApiV1SettingsResponse200 & {
    headers: Headers;
  };
export type patchApiV1SettingsResponse = patchApiV1SettingsResponseSuccess;

export const getPatchApiV1SettingsUrl = () => {
  return `/api/v1/settings`;
};

export const patchApiV1Settings = async (
  patchApiV1SettingsBody: PatchApiV1SettingsBody,
  options?: RequestInit,
): Promise<patchApiV1SettingsResponse> => {
  return customFetcher<patchApiV1SettingsResponse>(getPatchApiV1SettingsUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(patchApiV1SettingsBody),
  });
};

/**
 * @summary Check if initial setup is complete
 */
export type getApiV1SettingsSetupStatusResponse200 = {
  data: GetApiV1SettingsSetupStatus200;
  status: 200;
};

export type getApiV1SettingsSetupStatusResponseSuccess =
  getApiV1SettingsSetupStatusResponse200 & {
    headers: Headers;
  };
export type getApiV1SettingsSetupStatusResponse =
  getApiV1SettingsSetupStatusResponseSuccess;

export const getGetApiV1SettingsSetupStatusUrl = () => {
  return `/api/v1/settings/setup-status`;
};

export const getApiV1SettingsSetupStatus = async (
  options?: RequestInit,
): Promise<getApiV1SettingsSetupStatusResponse> => {
  return customFetcher<getApiV1SettingsSetupStatusResponse>(
    getGetApiV1SettingsSetupStatusUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Complete initial setup
 */
export type postApiV1SettingsCompleteSetupResponse200 = {
  data: PostApiV1SettingsCompleteSetup200;
  status: 200;
};

export type postApiV1SettingsCompleteSetupResponseSuccess =
  postApiV1SettingsCompleteSetupResponse200 & {
    headers: Headers;
  };
export type postApiV1SettingsCompleteSetupResponse =
  postApiV1SettingsCompleteSetupResponseSuccess;

export const getPostApiV1SettingsCompleteSetupUrl = () => {
  return `/api/v1/settings/complete-setup`;
};

export const postApiV1SettingsCompleteSetup = async (
  postApiV1SettingsCompleteSetupBody: PostApiV1SettingsCompleteSetupBody,
  options?: RequestInit,
): Promise<postApiV1SettingsCompleteSetupResponse> => {
  return customFetcher<postApiV1SettingsCompleteSetupResponse>(
    getPostApiV1SettingsCompleteSetupUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postApiV1SettingsCompleteSetupBody),
    },
  );
};

/**
 * Retrieve all TV shows with optional filtering, sorting, and pagination
 * @summary Get all TV shows
 */
export type getApiV1TvShowsResponse200 = {
  data: GetApiV1TvShows200;
  status: 200;
};

export type getApiV1TvShowsResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiV1TvShowsResponseSuccess = getApiV1TvShowsResponse200 & {
  headers: Headers;
};
export type getApiV1TvShowsResponseError = getApiV1TvShowsResponse400 & {
  headers: Headers;
};

export type getApiV1TvShowsResponse =
  | getApiV1TvShowsResponseSuccess
  | getApiV1TvShowsResponseError;

export const getGetApiV1TvShowsUrl = (params?: GetApiV1TvShowsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/tv-shows?${stringifiedParams}`
    : `/api/v1/tv-shows`;
};

export const getApiV1TvShows = async (
  params?: GetApiV1TvShowsParams,
  options?: RequestInit,
): Promise<getApiV1TvShowsResponse> => {
  return customFetcher<getApiV1TvShowsResponse>(getGetApiV1TvShowsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific TV show by its ID
 * @summary Get TV show by ID
 */
export type getApiV1TvShowsIdResponse200 = {
  data: GetApiV1TvShowsId200;
  status: 200;
};

export type getApiV1TvShowsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiV1TvShowsIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiV1TvShowsIdResponseSuccess = getApiV1TvShowsIdResponse200 & {
  headers: Headers;
};
export type getApiV1TvShowsIdResponseError = (
  | getApiV1TvShowsIdResponse400
  | getApiV1TvShowsIdResponse404
) & {
  headers: Headers;
};

export type getApiV1TvShowsIdResponse =
  | getApiV1TvShowsIdResponseSuccess
  | getApiV1TvShowsIdResponseError;

export const getGetApiV1TvShowsIdUrl = (id: string) => {
  return `/api/v1/tv-shows/${id}`;
};

export const getApiV1TvShowsId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiV1TvShowsIdResponse> => {
  return customFetcher<getApiV1TvShowsIdResponse>(getGetApiV1TvShowsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific season of a TV show
 * @summary Get a specific season
 */
export type getApiV1TvShowsIdSeasonsSeasonNumberResponse200 = {
  data: GetApiV1TvShowsIdSeasonsSeasonNumber200;
  status: 200;
};

export type getApiV1TvShowsIdSeasonsSeasonNumberResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiV1TvShowsIdSeasonsSeasonNumberResponseSuccess =
  getApiV1TvShowsIdSeasonsSeasonNumberResponse200 & {
    headers: Headers;
  };
export type getApiV1TvShowsIdSeasonsSeasonNumberResponseError =
  getApiV1TvShowsIdSeasonsSeasonNumberResponse404 & {
    headers: Headers;
  };

export type getApiV1TvShowsIdSeasonsSeasonNumberResponse =
  | getApiV1TvShowsIdSeasonsSeasonNumberResponseSuccess
  | getApiV1TvShowsIdSeasonsSeasonNumberResponseError;

export const getGetApiV1TvShowsIdSeasonsSeasonNumberUrl = (
  id: string,
  seasonNumber: number,
) => {
  return `/api/v1/tv-shows/${id}/seasons/${seasonNumber}`;
};

export const getApiV1TvShowsIdSeasonsSeasonNumber = async (
  id: string,
  seasonNumber: number,
  options?: RequestInit,
): Promise<getApiV1TvShowsIdSeasonsSeasonNumberResponse> => {
  return customFetcher<getApiV1TvShowsIdSeasonsSeasonNumberResponse>(
    getGetApiV1TvShowsIdSeasonsSeasonNumberUrl(id, seasonNumber),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a specific episode of a TV show
 * @summary Get a specific episode
 */
export type getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse200 =
  {
    data: GetApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200;
    status: 200;
  };

export type getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse404 =
  {
    data: ErrorResponse;
    status: 404;
  };

export type getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseSuccess =
  getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse200 & {
    headers: Headers;
  };
export type getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseError =
  getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse404 & {
    headers: Headers;
  };

export type getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse =
  | getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseSuccess
  | getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseError;

export const getGetApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberUrl = (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
) => {
  return `/api/v1/tv-shows/${id}/seasons/${seasonNumber}/episodes/${episodeNumber}`;
};

export const getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber = async (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
  options?: RequestInit,
): Promise<getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse> => {
  return customFetcher<getApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse>(
    getGetApiV1TvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberUrl(
      id,
      seasonNumber,
      episodeNumber,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};
