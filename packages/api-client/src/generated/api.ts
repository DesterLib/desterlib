/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import { customFetcher } from "../core/fetcher";
export type SuccessResponseData = { [key: string]: unknown };

export interface SuccessResponse {
  success?: boolean;
  requestId?: string;
  data?: SuccessResponseData;
}

export type ErrorResponseError = {
  code?: string;
  message?: string;
};

export interface ErrorResponse {
  success?: boolean;
  requestId?: string;
  error?: ErrorResponseError;
}

/**
 * Type of media to scan
 */
export type MediaType = (typeof MediaType)[keyof typeof MediaType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MediaType = {
  MOVIE: "MOVIE",
  TV_SHOW: "TV_SHOW",
  MUSIC: "MUSIC",
  COMIC: "COMIC",
} as const;

export interface ScannedFile {
  path?: string;
  name?: string;
  size?: number;
  extension?: string;
  relativePath?: string;
}

export type ScanResultStats = {
  /** Number of new files added */
  added?: number;
  /** Number of files already existing */
  skipped?: number;
  /** Number of existing files updated */
  updated?: number;
};

export interface ScanResult {
  collectionName?: string;
  mediaType?: MediaType;
  scannedPath?: string;
  totalFiles?: number;
  files?: ScannedFile[];
  timestamp?: string;
  stats?: ScanResultStats;
}

export type SyncResultStats = {
  /** Number of files updated */
  updated?: number;
  /** Number of files removed */
  removed?: number;
  /** Number of files checked */
  checked?: number;
};

export interface SyncResult {
  collectionName?: string;
  mediaType?: MediaType;
  timestamp?: string;
  stats?: SyncResultStats;
}

export interface Pagination {
  /** Total number of items */
  total?: number;
  /** Number of items per page */
  limit?: number;
  /** Number of items skipped */
  offset?: number;
  /** Whether there are more items available */
  hasMore?: boolean;
}

export interface Media {
  id?: string;
  title?: string;
  type?: MediaType;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  posterUrl?: string | null;
  /** @nullable */
  backdropUrl?: string | null;
  /** @nullable */
  releaseDate?: string | null;
  /** @nullable */
  rating?: number | null;
  createdAt?: string;
  updatedAt?: string;
  /** @nullable */
  movie?: Movie;
  /** @nullable */
  tvShow?: TVShow;
  /** @nullable */
  music?: Music;
  /** @nullable */
  comic?: Comic;
  genres?: MediaGenre[];
  people?: MediaPerson[];
  collections?: MediaCollection[];
  externalIds?: ExternalId[];
}

export interface Movie {
  id?: string;
  /**
   * Duration in minutes
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  director?: string | null;
  /** @nullable */
  trailerUrl?: string | null;
  mediaId?: string;
}

export interface TVShow {
  id?: string;
  /** @nullable */
  creator?: string | null;
  /** @nullable */
  network?: string | null;
  mediaId?: string;
  seasons?: Season[];
}

export interface Season {
  id?: string;
  number?: number;
  tvShowId?: string;
  episodes?: Episode[];
}

export interface Episode {
  id?: string;
  title?: string;
  number?: number;
  /**
   * Duration in minutes
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  airDate?: string | null;
  /** @nullable */
  videoUrl?: string | null;
  seasonId?: string;
}

export interface Music {
  id?: string;
  artist?: string;
  /** @nullable */
  album?: string | null;
  /** @nullable */
  genre?: string | null;
  /**
   * Duration in seconds
   * @nullable
   */
  duration?: number | null;
  /** @nullable */
  trackUrl?: string | null;
  mediaId?: string;
}

export interface Comic {
  id?: string;
  /** @nullable */
  issue?: number | null;
  /** @nullable */
  volume?: string | null;
  /** @nullable */
  publisher?: string | null;
  /** @nullable */
  pages?: number | null;
  /** @nullable */
  fileUrl?: string | null;
  mediaId?: string;
}

export interface Genre {
  id?: string;
  name?: string;
  slug?: string;
  /** @nullable */
  description?: string | null;
}

export interface MediaGenre {
  id?: string;
  mediaId?: string;
  genreId?: string;
  genre?: Genre;
}

export interface Person {
  id?: string;
  name?: string;
  /** @nullable */
  bio?: string | null;
  /** @nullable */
  birthDate?: string | null;
  /** @nullable */
  profileUrl?: string | null;
}

export type MediaPersonRole =
  (typeof MediaPersonRole)[keyof typeof MediaPersonRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MediaPersonRole = {
  ACTOR: "ACTOR",
  DIRECTOR: "DIRECTOR",
  WRITER: "WRITER",
  PRODUCER: "PRODUCER",
  ARTIST: "ARTIST",
  COMPOSER: "COMPOSER",
  AUTHOR: "AUTHOR",
} as const;

export interface MediaPerson {
  id?: string;
  role?: MediaPersonRole;
  /** @nullable */
  character?: string | null;
  mediaId?: string;
  personId?: string;
  person?: Person;
}

export interface Collection {
  id?: string;
  name?: string;
  slug?: string;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  posterUrl?: string | null;
  /** @nullable */
  backdropUrl?: string | null;
}

export interface MediaCollection {
  id?: string;
  mediaId?: string;
  collectionId?: string;
  /** @nullable */
  order?: number | null;
  collection?: Collection;
}

export type ExternalIdSource =
  (typeof ExternalIdSource)[keyof typeof ExternalIdSource];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExternalIdSource = {
  TMDB: "TMDB",
  IMDB: "IMDB",
  TVDB: "TVDB",
  ANIDB: "ANIDB",
  MYANIMELIST: "MYANIMELIST",
  MUSICBRAINZ: "MUSICBRAINZ",
  SPOTIFY: "SPOTIFY",
  COMICVINE: "COMICVINE",
  OTHER: "OTHER",
} as const;

export interface ExternalId {
  id?: string;
  source?: ExternalIdSource;
  externalId?: string;
  mediaId?: string;
}

export type GetAdminAlertsHistoryParams = {
  limit?: number;
};

export type PostAuthRegisterBodyRole =
  (typeof PostAuthRegisterBodyRole)[keyof typeof PostAuthRegisterBodyRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthRegisterBodyRole = {
  ADMIN: "ADMIN",
  USER: "USER",
  GUEST: "GUEST",
} as const;

export type PostAuthRegisterBody = {
  username: string;
  email?: string;
  displayName?: string;
  password?: string;
  pin?: string;
  isPasswordless?: boolean;
  role?: PostAuthRegisterBodyRole;
};

export type PostAuthLoginBody = {
  username: string;
  password?: string;
  pin?: string;
};

export type PostAuthLoginPasswordlessBody = {
  username: string;
};

export type PostAuthRefreshBody = {
  refreshToken: string;
};

export type PostAuthLogoutBody = {
  refreshToken: string;
};

export type GetApiComicsParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter comics released after this date
   */
  releasedAfter?: string;
  /**
   * Filter comics released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiComicsSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiComicsSortOrder;
};

export type GetApiComicsSortBy =
  (typeof GetApiComicsSortBy)[keyof typeof GetApiComicsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiComicsSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiComicsSortOrder =
  (typeof GetApiComicsSortOrder)[keyof typeof GetApiComicsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiComicsSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiComics200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiComics200AllOf = {
  data?: GetApiComics200AllOfData;
};

export type GetApiComics200 = SuccessResponse & GetApiComics200AllOf;

export type GetApiComicsId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiComicsId200AllOf = {
  data?: GetApiComicsId200AllOfData;
};

export type GetApiComicsId200 = SuccessResponse & GetApiComicsId200AllOf;

export type GetApiMediaParams = {
  /**
   * Filter by media type
   */
  type?: MediaType;
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter media released after this date
   */
  releasedAfter?: string;
  /**
   * Filter media released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiMediaSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiMediaSortOrder;
};

export type GetApiMediaSortBy =
  (typeof GetApiMediaSortBy)[keyof typeof GetApiMediaSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMediaSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiMediaSortOrder =
  (typeof GetApiMediaSortOrder)[keyof typeof GetApiMediaSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMediaSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiMedia200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiMedia200AllOf = {
  data?: GetApiMedia200AllOfData;
};

export type GetApiMedia200 = SuccessResponse & GetApiMedia200AllOf;

export type GetApiMediaStatistics200AllOfDataStatisticsByType = {
  movies?: number;
  tvShows?: number;
  music?: number;
  comics?: number;
};

export type GetApiMediaStatistics200AllOfDataStatistics = {
  total?: number;
  byType?: GetApiMediaStatistics200AllOfDataStatisticsByType;
};

export type GetApiMediaStatistics200AllOfData = {
  message?: string;
  statistics?: GetApiMediaStatistics200AllOfDataStatistics;
};

export type GetApiMediaStatistics200AllOf = {
  data?: GetApiMediaStatistics200AllOfData;
};

export type GetApiMediaStatistics200 = SuccessResponse &
  GetApiMediaStatistics200AllOf;

export type GetApiMediaId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiMediaId200AllOf = {
  data?: GetApiMediaId200AllOfData;
};

export type GetApiMediaId200 = SuccessResponse & GetApiMediaId200AllOf;

export type GetApiMoviesParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter movies released after this date
   */
  releasedAfter?: string;
  /**
   * Filter movies released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiMoviesSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiMoviesSortOrder;
};

export type GetApiMoviesSortBy =
  (typeof GetApiMoviesSortBy)[keyof typeof GetApiMoviesSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMoviesSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiMoviesSortOrder =
  (typeof GetApiMoviesSortOrder)[keyof typeof GetApiMoviesSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMoviesSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiMovies200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiMovies200AllOf = {
  data?: GetApiMovies200AllOfData;
};

export type GetApiMovies200 = SuccessResponse & GetApiMovies200AllOf;

export type GetApiMoviesId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiMoviesId200AllOf = {
  data?: GetApiMoviesId200AllOfData;
};

export type GetApiMoviesId200 = SuccessResponse & GetApiMoviesId200AllOf;

export type GetApiMusicParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter music released after this date
   */
  releasedAfter?: string;
  /**
   * Filter music released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiMusicSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiMusicSortOrder;
};

export type GetApiMusicSortBy =
  (typeof GetApiMusicSortBy)[keyof typeof GetApiMusicSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMusicSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiMusicSortOrder =
  (typeof GetApiMusicSortOrder)[keyof typeof GetApiMusicSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiMusicSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiMusic200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiMusic200AllOf = {
  data?: GetApiMusic200AllOfData;
};

export type GetApiMusic200 = SuccessResponse & GetApiMusic200AllOf;

export type GetApiMusicId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiMusicId200AllOf = {
  data?: GetApiMusicId200AllOfData;
};

export type GetApiMusicId200 = SuccessResponse & GetApiMusicId200AllOf;

export type GetApiNotificationsStream200Type =
  (typeof GetApiNotificationsStream200Type)[keyof typeof GetApiNotificationsStream200Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsStream200Type = {
  scan: "scan",
  metadata: "metadata",
  sync: "sync",
  collection: "collection",
  settings: "settings",
  error: "error",
} as const;

export type GetApiNotificationsStream200Status =
  (typeof GetApiNotificationsStream200Status)[keyof typeof GetApiNotificationsStream200Status];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiNotificationsStream200Status = {
  started: "started",
  progress: "progress",
  completed: "completed",
  failed: "failed",
} as const;

/**
 * Additional metadata about the event
 */
export type GetApiNotificationsStream200Data = { [key: string]: unknown };

export type GetApiNotificationsStream200 = {
  /** Unique notification ID */
  id?: string;
  type?: GetApiNotificationsStream200Type;
  status?: GetApiNotificationsStream200Status;
  /** Human-readable notification message */
  message?: string;
  timestamp?: string;
  /** Additional metadata about the event */
  data?: GetApiNotificationsStream200Data;
};

export type PostApiScanBody = {
  /** Absolute path to the directory to scan */
  path: string;
  mediaType: MediaType;
  /** Optional collection name (defaults to folder name) */
  collectionName?: string;
  /** If true, updates existing entries with new external IDs and metadata */
  updateExisting?: boolean;
};

export type PostApiScan200AllOfData = {
  message?: string;
  scan?: ScanResult;
};

export type PostApiScan200AllOf = {
  data?: PostApiScan200AllOfData;
};

export type PostApiScan200 = SuccessResponse & PostApiScan200AllOf;

export type PostApiScanSyncBody = {
  /** Name of the collection to sync */
  collectionName: string;
  mediaType: MediaType;
};

export type PostApiScanSync200AllOfData = {
  message?: string;
  sync?: SyncResult;
};

export type PostApiScanSync200AllOf = {
  data?: PostApiScanSync200AllOfData;
};

export type PostApiScanSync200 = SuccessResponse & PostApiScanSync200AllOf;

export type PostApiScanSyncAll200AllOfData = {
  message?: string;
  syncs?: SyncResult[];
};

export type PostApiScanSyncAll200AllOf = {
  data?: PostApiScanSyncAll200AllOfData;
};

export type PostApiScanSyncAll200 = SuccessResponse &
  PostApiScanSyncAll200AllOf;

export type GetApiSearchParams = {
  /**
   * Search query
   */
  q: string;
  /**
   * Filter results by type (optional)
   */
  type?: GetApiSearchType;
};

export type GetApiSearchType =
  (typeof GetApiSearchType)[keyof typeof GetApiSearchType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiSearchType = {
  media: "media",
  collections: "collections",
} as const;

export type GetApiSearch200AllOfData = {
  message?: string;
  query?: string;
  media?: Media[];
  collections?: Collection[];
  total?: number;
};

export type GetApiSearch200AllOf = {
  data?: GetApiSearch200AllOfData;
};

export type GetApiSearch200 = SuccessResponse & GetApiSearch200AllOf;

export type PatchApiSettingsBodyLibrariesItemType =
  (typeof PatchApiSettingsBodyLibrariesItemType)[keyof typeof PatchApiSettingsBodyLibrariesItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchApiSettingsBodyLibrariesItemType = {
  MOVIE: "MOVIE",
  TV_SHOW: "TV_SHOW",
  MUSIC: "MUSIC",
  COMIC: "COMIC",
} as const;

export type PatchApiSettingsBodyLibrariesItem = {
  name?: string;
  type?: PatchApiSettingsBodyLibrariesItemType;
  path?: string;
};

export type PatchApiSettingsBody = {
  libraries?: PatchApiSettingsBodyLibrariesItem[];
  tmdbApiKey?: string;
};

export type PostApiSettingsCompleteSetupBodyLibrariesItemType =
  (typeof PostApiSettingsCompleteSetupBodyLibrariesItemType)[keyof typeof PostApiSettingsCompleteSetupBodyLibrariesItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiSettingsCompleteSetupBodyLibrariesItemType = {
  MOVIE: "MOVIE",
  TV_SHOW: "TV_SHOW",
  MUSIC: "MUSIC",
  COMIC: "COMIC",
} as const;

export type PostApiSettingsCompleteSetupBodyLibrariesItem = {
  name: string;
  type: PostApiSettingsCompleteSetupBodyLibrariesItemType;
  path: string;
};

export type PostApiSettingsCompleteSetupBody = {
  libraries: PostApiSettingsCompleteSetupBodyLibrariesItem[];
  /** Required TMDB API key for metadata */
  tmdbApiKey: string;
};

export type GetApiTvShowsParams = {
  /**
   * Search in title and description
   */
  search?: string;
  /**
   * Filter by genre ID
   */
  genreId?: string;
  /**
   * Filter by person ID
   */
  personId?: string;
  /**
   * Filter by collection ID
   */
  collectionId?: string;
  /**
   * Minimum rating filter
   * @minimum 0
   * @maximum 10
   */
  minRating?: number;
  /**
   * Maximum rating filter
   * @minimum 0
   * @maximum 10
   */
  maxRating?: number;
  /**
   * Filter TV shows released after this date
   */
  releasedAfter?: string;
  /**
   * Filter TV shows released before this date
   */
  releasedBefore?: string;
  /**
   * Number of items to return
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
  /**
   * Number of items to skip
   * @minimum 0
   */
  offset?: number;
  /**
   * Field to sort by
   */
  sortBy?: GetApiTvShowsSortBy;
  /**
   * Sort order
   */
  sortOrder?: GetApiTvShowsSortOrder;
};

export type GetApiTvShowsSortBy =
  (typeof GetApiTvShowsSortBy)[keyof typeof GetApiTvShowsSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiTvShowsSortBy = {
  title: "title",
  releaseDate: "releaseDate",
  rating: "rating",
  createdAt: "createdAt",
} as const;

export type GetApiTvShowsSortOrder =
  (typeof GetApiTvShowsSortOrder)[keyof typeof GetApiTvShowsSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiTvShowsSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type GetApiTvShows200AllOfData = {
  message?: string;
  media?: Media[];
  pagination?: Pagination;
};

export type GetApiTvShows200AllOf = {
  data?: GetApiTvShows200AllOfData;
};

export type GetApiTvShows200 = SuccessResponse & GetApiTvShows200AllOf;

export type GetApiTvShowsId200AllOfData = {
  message?: string;
  media?: Media;
};

export type GetApiTvShowsId200AllOf = {
  data?: GetApiTvShowsId200AllOfData;
};

export type GetApiTvShowsId200 = SuccessResponse & GetApiTvShowsId200AllOf;

export type GetApiTvShowsIdSeasonsSeasonNumber200AllOfData = {
  message?: string;
  season?: Season;
};

export type GetApiTvShowsIdSeasonsSeasonNumber200AllOf = {
  data?: GetApiTvShowsIdSeasonsSeasonNumber200AllOfData;
};

export type GetApiTvShowsIdSeasonsSeasonNumber200 = SuccessResponse &
  GetApiTvShowsIdSeasonsSeasonNumber200AllOf;

export type GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOfData =
  {
    message?: string;
    episode?: Episode;
  };

export type GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOf = {
  data?: GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOfData;
};

export type GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200 =
  SuccessResponse &
    GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200AllOf;

/**
 * @summary List all database backups
 */
export type getAdminBackupsResponse200 = {
  data: void;
  status: 200;
};

export type getAdminBackupsResponseSuccess = getAdminBackupsResponse200 & {
  headers: Headers;
};
export type getAdminBackupsResponse = getAdminBackupsResponseSuccess;

export const getGetAdminBackupsUrl = () => {
  return `/admin/backups`;
};

export const getAdminBackups = async (
  options?: RequestInit,
): Promise<getAdminBackupsResponse> => {
  return customFetcher<getAdminBackupsResponse>(getGetAdminBackupsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Create a new database backup
 */
export type postAdminBackupsResponse201 = {
  data: void;
  status: 201;
};

export type postAdminBackupsResponseSuccess = postAdminBackupsResponse201 & {
  headers: Headers;
};
export type postAdminBackupsResponse = postAdminBackupsResponseSuccess;

export const getPostAdminBackupsUrl = () => {
  return `/admin/backups`;
};

export const postAdminBackups = async (
  options?: RequestInit,
): Promise<postAdminBackupsResponse> => {
  return customFetcher<postAdminBackupsResponse>(getPostAdminBackupsUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Restore database from backup
 */
export type postAdminBackupsFilenameRestoreResponse200 = {
  data: void;
  status: 200;
};

export type postAdminBackupsFilenameRestoreResponseSuccess =
  postAdminBackupsFilenameRestoreResponse200 & {
    headers: Headers;
  };
export type postAdminBackupsFilenameRestoreResponse =
  postAdminBackupsFilenameRestoreResponseSuccess;

export const getPostAdminBackupsFilenameRestoreUrl = (filename: string) => {
  return `/admin/backups/${filename}/restore`;
};

export const postAdminBackupsFilenameRestore = async (
  filename: string,
  options?: RequestInit,
): Promise<postAdminBackupsFilenameRestoreResponse> => {
  return customFetcher<postAdminBackupsFilenameRestoreResponse>(
    getPostAdminBackupsFilenameRestoreUrl(filename),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Delete a backup file
 */
export type deleteAdminBackupsFilenameResponse200 = {
  data: void;
  status: 200;
};

export type deleteAdminBackupsFilenameResponseSuccess =
  deleteAdminBackupsFilenameResponse200 & {
    headers: Headers;
  };
export type deleteAdminBackupsFilenameResponse =
  deleteAdminBackupsFilenameResponseSuccess;

export const getDeleteAdminBackupsFilenameUrl = (filename: string) => {
  return `/admin/backups/${filename}`;
};

export const deleteAdminBackupsFilename = async (
  filename: string,
  options?: RequestInit,
): Promise<deleteAdminBackupsFilenameResponse> => {
  return customFetcher<deleteAdminBackupsFilenameResponse>(
    getDeleteAdminBackupsFilenameUrl(filename),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Manually update business metrics
 */
export type postAdminMetricsUpdateResponse200 = {
  data: void;
  status: 200;
};

export type postAdminMetricsUpdateResponseSuccess =
  postAdminMetricsUpdateResponse200 & {
    headers: Headers;
  };
export type postAdminMetricsUpdateResponse =
  postAdminMetricsUpdateResponseSuccess;

export const getPostAdminMetricsUpdateUrl = () => {
  return `/admin/metrics/update`;
};

export const postAdminMetricsUpdate = async (
  options?: RequestInit,
): Promise<postAdminMetricsUpdateResponse> => {
  return customFetcher<postAdminMetricsUpdateResponse>(
    getPostAdminMetricsUpdateUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Get active alerts
 */
export type getAdminAlertsResponse200 = {
  data: void;
  status: 200;
};

export type getAdminAlertsResponseSuccess = getAdminAlertsResponse200 & {
  headers: Headers;
};
export type getAdminAlertsResponse = getAdminAlertsResponseSuccess;

export const getGetAdminAlertsUrl = () => {
  return `/admin/alerts`;
};

export const getAdminAlerts = async (
  options?: RequestInit,
): Promise<getAdminAlertsResponse> => {
  return customFetcher<getAdminAlertsResponse>(getGetAdminAlertsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get alert history
 */
export type getAdminAlertsHistoryResponse200 = {
  data: void;
  status: 200;
};

export type getAdminAlertsHistoryResponseSuccess =
  getAdminAlertsHistoryResponse200 & {
    headers: Headers;
  };
export type getAdminAlertsHistoryResponse =
  getAdminAlertsHistoryResponseSuccess;

export const getGetAdminAlertsHistoryUrl = (
  params?: GetAdminAlertsHistoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/alerts/history?${stringifiedParams}`
    : `/admin/alerts/history`;
};

export const getAdminAlertsHistory = async (
  params?: GetAdminAlertsHistoryParams,
  options?: RequestInit,
): Promise<getAdminAlertsHistoryResponse> => {
  return customFetcher<getAdminAlertsHistoryResponse>(
    getGetAdminAlertsHistoryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Perform comprehensive health check
 */
export type getAdminHealthCheckResponse200 = {
  data: void;
  status: 200;
};

export type getAdminHealthCheckResponseSuccess =
  getAdminHealthCheckResponse200 & {
    headers: Headers;
  };
export type getAdminHealthCheckResponse = getAdminHealthCheckResponseSuccess;

export const getGetAdminHealthCheckUrl = () => {
  return `/admin/health/check`;
};

export const getAdminHealthCheck = async (
  options?: RequestInit,
): Promise<getAdminHealthCheckResponse> => {
  return customFetcher<getAdminHealthCheckResponse>(
    getGetAdminHealthCheckUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get performance statistics
 */
export type getAdminPerformanceResponse200 = {
  data: void;
  status: 200;
};

export type getAdminPerformanceResponseSuccess =
  getAdminPerformanceResponse200 & {
    headers: Headers;
  };
export type getAdminPerformanceResponse = getAdminPerformanceResponseSuccess;

export const getGetAdminPerformanceUrl = () => {
  return `/admin/performance`;
};

export const getAdminPerformance = async (
  options?: RequestInit,
): Promise<getAdminPerformanceResponse> => {
  return customFetcher<getAdminPerformanceResponse>(
    getGetAdminPerformanceUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Reset performance statistics
 */
export type postAdminPerformanceResetResponse200 = {
  data: void;
  status: 200;
};

export type postAdminPerformanceResetResponseSuccess =
  postAdminPerformanceResetResponse200 & {
    headers: Headers;
  };
export type postAdminPerformanceResetResponse =
  postAdminPerformanceResetResponseSuccess;

export const getPostAdminPerformanceResetUrl = () => {
  return `/admin/performance/reset`;
};

export const postAdminPerformanceReset = async (
  options?: RequestInit,
): Promise<postAdminPerformanceResetResponse> => {
  return customFetcher<postAdminPerformanceResetResponse>(
    getPostAdminPerformanceResetUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Register a new user
 */
export type postAuthRegisterResponse201 = {
  data: void;
  status: 201;
};

export type postAuthRegisterResponseSuccess = postAuthRegisterResponse201 & {
  headers: Headers;
};
export type postAuthRegisterResponse = postAuthRegisterResponseSuccess;

export const getPostAuthRegisterUrl = () => {
  return `/auth/register`;
};

export const postAuthRegister = async (
  postAuthRegisterBody: PostAuthRegisterBody,
  options?: RequestInit,
): Promise<postAuthRegisterResponse> => {
  return customFetcher<postAuthRegisterResponse>(getPostAuthRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthRegisterBody),
  });
};

/**
 * @summary Login with username and password or PIN
 */
export type postAuthLoginResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLoginResponseSuccess = postAuthLoginResponse200 & {
  headers: Headers;
};
export type postAuthLoginResponse = postAuthLoginResponseSuccess;

export const getPostAuthLoginUrl = () => {
  return `/auth/login`;
};

export const postAuthLogin = async (
  postAuthLoginBody: PostAuthLoginBody,
  options?: RequestInit,
): Promise<postAuthLoginResponse> => {
  return customFetcher<postAuthLoginResponse>(getPostAuthLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthLoginBody),
  });
};

/**
 * @summary Login without password (passwordless accounts only)
 */
export type postAuthLoginPasswordlessResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLoginPasswordlessResponseSuccess =
  postAuthLoginPasswordlessResponse200 & {
    headers: Headers;
  };
export type postAuthLoginPasswordlessResponse =
  postAuthLoginPasswordlessResponseSuccess;

export const getPostAuthLoginPasswordlessUrl = () => {
  return `/auth/login/passwordless`;
};

export const postAuthLoginPasswordless = async (
  postAuthLoginPasswordlessBody: PostAuthLoginPasswordlessBody,
  options?: RequestInit,
): Promise<postAuthLoginPasswordlessResponse> => {
  return customFetcher<postAuthLoginPasswordlessResponse>(
    getPostAuthLoginPasswordlessUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postAuthLoginPasswordlessBody),
    },
  );
};

/**
 * @summary Refresh access token
 */
export type postAuthRefreshResponse200 = {
  data: void;
  status: 200;
};

export type postAuthRefreshResponseSuccess = postAuthRefreshResponse200 & {
  headers: Headers;
};
export type postAuthRefreshResponse = postAuthRefreshResponseSuccess;

export const getPostAuthRefreshUrl = () => {
  return `/auth/refresh`;
};

export const postAuthRefresh = async (
  postAuthRefreshBody: PostAuthRefreshBody,
  options?: RequestInit,
): Promise<postAuthRefreshResponse> => {
  return customFetcher<postAuthRefreshResponse>(getPostAuthRefreshUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthRefreshBody),
  });
};

/**
 * @summary Logout current session
 */
export type postAuthLogoutResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLogoutResponseSuccess = postAuthLogoutResponse200 & {
  headers: Headers;
};
export type postAuthLogoutResponse = postAuthLogoutResponseSuccess;

export const getPostAuthLogoutUrl = () => {
  return `/auth/logout`;
};

export const postAuthLogout = async (
  postAuthLogoutBody: PostAuthLogoutBody,
  options?: RequestInit,
): Promise<postAuthLogoutResponse> => {
  return customFetcher<postAuthLogoutResponse>(getPostAuthLogoutUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthLogoutBody),
  });
};

/**
 * @summary Logout all sessions
 */
export type postAuthLogoutAllResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLogoutAllResponseSuccess = postAuthLogoutAllResponse200 & {
  headers: Headers;
};
export type postAuthLogoutAllResponse = postAuthLogoutAllResponseSuccess;

export const getPostAuthLogoutAllUrl = () => {
  return `/auth/logout-all`;
};

export const postAuthLogoutAll = async (
  options?: RequestInit,
): Promise<postAuthLogoutAllResponse> => {
  return customFetcher<postAuthLogoutAllResponse>(getPostAuthLogoutAllUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get current user information
 */
export type getAuthMeResponse200 = {
  data: void;
  status: 200;
};

export type getAuthMeResponseSuccess = getAuthMeResponse200 & {
  headers: Headers;
};
export type getAuthMeResponse = getAuthMeResponseSuccess;

export const getGetAuthMeUrl = () => {
  return `/auth/me`;
};

export const getAuthMe = async (
  options?: RequestInit,
): Promise<getAuthMeResponse> => {
  return customFetcher<getAuthMeResponse>(getGetAuthMeUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update current user
 */
export type putAuthMeResponse200 = {
  data: void;
  status: 200;
};

export type putAuthMeResponseSuccess = putAuthMeResponse200 & {
  headers: Headers;
};
export type putAuthMeResponse = putAuthMeResponseSuccess;

export const getPutAuthMeUrl = () => {
  return `/auth/me`;
};

export const putAuthMe = async (
  options?: RequestInit,
): Promise<putAuthMeResponse> => {
  return customFetcher<putAuthMeResponse>(getPutAuthMeUrl(), {
    ...options,
    method: "PUT",
  });
};

/**
 * @summary Change password
 */
export type postAuthChangePasswordResponse200 = {
  data: void;
  status: 200;
};

export type postAuthChangePasswordResponseSuccess =
  postAuthChangePasswordResponse200 & {
    headers: Headers;
  };
export type postAuthChangePasswordResponse =
  postAuthChangePasswordResponseSuccess;

export const getPostAuthChangePasswordUrl = () => {
  return `/auth/change-password`;
};

export const postAuthChangePassword = async (
  options?: RequestInit,
): Promise<postAuthChangePasswordResponse> => {
  return customFetcher<postAuthChangePasswordResponse>(
    getPostAuthChangePasswordUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Change PIN
 */
export type postAuthChangePinResponse200 = {
  data: void;
  status: 200;
};

export type postAuthChangePinResponseSuccess = postAuthChangePinResponse200 & {
  headers: Headers;
};
export type postAuthChangePinResponse = postAuthChangePinResponseSuccess;

export const getPostAuthChangePinUrl = () => {
  return `/auth/change-pin`;
};

export const postAuthChangePin = async (
  options?: RequestInit,
): Promise<postAuthChangePinResponse> => {
  return customFetcher<postAuthChangePinResponse>(getPostAuthChangePinUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get all active sessions
 */
export type getAuthSessionsResponse200 = {
  data: void;
  status: 200;
};

export type getAuthSessionsResponseSuccess = getAuthSessionsResponse200 & {
  headers: Headers;
};
export type getAuthSessionsResponse = getAuthSessionsResponseSuccess;

export const getGetAuthSessionsUrl = () => {
  return `/auth/sessions`;
};

export const getAuthSessions = async (
  options?: RequestInit,
): Promise<getAuthSessionsResponse> => {
  return customFetcher<getAuthSessionsResponse>(getGetAuthSessionsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Revoke a specific session
 */
export type deleteAuthSessionsSessionIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteAuthSessionsSessionIdResponseSuccess =
  deleteAuthSessionsSessionIdResponse200 & {
    headers: Headers;
  };
export type deleteAuthSessionsSessionIdResponse =
  deleteAuthSessionsSessionIdResponseSuccess;

export const getDeleteAuthSessionsSessionIdUrl = (sessionId: string) => {
  return `/auth/sessions/${sessionId}`;
};

export const deleteAuthSessionsSessionId = async (
  sessionId: string,
  options?: RequestInit,
): Promise<deleteAuthSessionsSessionIdResponse> => {
  return customFetcher<deleteAuthSessionsSessionIdResponse>(
    getDeleteAuthSessionsSessionIdUrl(sessionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary List all API keys
 */
export type getAuthApiKeysResponse200 = {
  data: void;
  status: 200;
};

export type getAuthApiKeysResponseSuccess = getAuthApiKeysResponse200 & {
  headers: Headers;
};
export type getAuthApiKeysResponse = getAuthApiKeysResponseSuccess;

export const getGetAuthApiKeysUrl = () => {
  return `/auth/api-keys`;
};

export const getAuthApiKeys = async (
  options?: RequestInit,
): Promise<getAuthApiKeysResponse> => {
  return customFetcher<getAuthApiKeysResponse>(getGetAuthApiKeysUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Create a new API key
 */
export type postAuthApiKeysResponse201 = {
  data: void;
  status: 201;
};

export type postAuthApiKeysResponseSuccess = postAuthApiKeysResponse201 & {
  headers: Headers;
};
export type postAuthApiKeysResponse = postAuthApiKeysResponseSuccess;

export const getPostAuthApiKeysUrl = () => {
  return `/auth/api-keys`;
};

export const postAuthApiKeys = async (
  options?: RequestInit,
): Promise<postAuthApiKeysResponse> => {
  return customFetcher<postAuthApiKeysResponse>(getPostAuthApiKeysUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get a specific API key
 */
export type getAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type getAuthApiKeysKeyIdResponseSuccess =
  getAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type getAuthApiKeysKeyIdResponse = getAuthApiKeysKeyIdResponseSuccess;

export const getGetAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const getAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<getAuthApiKeysKeyIdResponse> => {
  return customFetcher<getAuthApiKeysKeyIdResponse>(
    getGetAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update an API key
 */
export type putAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type putAuthApiKeysKeyIdResponseSuccess =
  putAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type putAuthApiKeysKeyIdResponse = putAuthApiKeysKeyIdResponseSuccess;

export const getPutAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const putAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<putAuthApiKeysKeyIdResponse> => {
  return customFetcher<putAuthApiKeysKeyIdResponse>(
    getPutAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Delete an API key
 */
export type deleteAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteAuthApiKeysKeyIdResponseSuccess =
  deleteAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type deleteAuthApiKeysKeyIdResponse =
  deleteAuthApiKeysKeyIdResponseSuccess;

export const getDeleteAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const deleteAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<deleteAuthApiKeysKeyIdResponse> => {
  return customFetcher<deleteAuthApiKeysKeyIdResponse>(
    getDeleteAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Revoke an API key
 */
export type postAuthApiKeysKeyIdRevokeResponse200 = {
  data: void;
  status: 200;
};

export type postAuthApiKeysKeyIdRevokeResponseSuccess =
  postAuthApiKeysKeyIdRevokeResponse200 & {
    headers: Headers;
  };
export type postAuthApiKeysKeyIdRevokeResponse =
  postAuthApiKeysKeyIdRevokeResponseSuccess;

export const getPostAuthApiKeysKeyIdRevokeUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}/revoke`;
};

export const postAuthApiKeysKeyIdRevoke = async (
  keyId: string,
  options?: RequestInit,
): Promise<postAuthApiKeysKeyIdRevokeResponse> => {
  return customFetcher<postAuthApiKeysKeyIdRevokeResponse>(
    getPostAuthApiKeysKeyIdRevokeUrl(keyId),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary List all users (admin only)
 */
export type getUsersResponse200 = {
  data: void;
  status: 200;
};

export type getUsersResponseSuccess = getUsersResponse200 & {
  headers: Headers;
};
export type getUsersResponse = getUsersResponseSuccess;

export const getGetUsersUrl = () => {
  return `/users`;
};

export const getUsers = async (
  options?: RequestInit,
): Promise<getUsersResponse> => {
  return customFetcher<getUsersResponse>(getGetUsersUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get user by ID (admin only)
 */
export type getUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type getUsersUserIdResponseSuccess = getUsersUserIdResponse200 & {
  headers: Headers;
};
export type getUsersUserIdResponse = getUsersUserIdResponseSuccess;

export const getGetUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const getUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<getUsersUserIdResponse> => {
  return customFetcher<getUsersUserIdResponse>(getGetUsersUserIdUrl(userId), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update user (admin only)
 */
export type putUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type putUsersUserIdResponseSuccess = putUsersUserIdResponse200 & {
  headers: Headers;
};
export type putUsersUserIdResponse = putUsersUserIdResponseSuccess;

export const getPutUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const putUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<putUsersUserIdResponse> => {
  return customFetcher<putUsersUserIdResponse>(getPutUsersUserIdUrl(userId), {
    ...options,
    method: "PUT",
  });
};

/**
 * @summary Delete user (admin only)
 */
export type deleteUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteUsersUserIdResponseSuccess = deleteUsersUserIdResponse200 & {
  headers: Headers;
};
export type deleteUsersUserIdResponse = deleteUsersUserIdResponseSuccess;

export const getDeleteUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const deleteUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<deleteUsersUserIdResponse> => {
  return customFetcher<deleteUsersUserIdResponse>(
    getDeleteUsersUserIdUrl(userId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Retrieve all collections with media count and recent media
 * @summary Get all collections
 */
export type getApiV1CollectionsResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsResponseSuccess =
  getApiV1CollectionsResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsResponse = getApiV1CollectionsResponseSuccess;

export const getGetApiV1CollectionsUrl = () => {
  return `/api/v1/collections`;
};

export const getApiV1Collections = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsResponse> => {
  return customFetcher<getApiV1CollectionsResponse>(
    getGetApiV1CollectionsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve statistics about collections
 * @summary Get collection statistics
 */
export type getApiV1CollectionsStatisticsResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsStatisticsResponseSuccess =
  getApiV1CollectionsStatisticsResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsStatisticsResponse =
  getApiV1CollectionsStatisticsResponseSuccess;

export const getGetApiV1CollectionsStatisticsUrl = () => {
  return `/api/v1/collections/statistics`;
};

export const getApiV1CollectionsStatistics = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsStatisticsResponse> => {
  return customFetcher<getApiV1CollectionsStatisticsResponse>(
    getGetApiV1CollectionsStatisticsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve all collections that are libraries
 * @summary Get all libraries
 */
export type getApiV1CollectionsLibrariesResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsLibrariesResponseSuccess =
  getApiV1CollectionsLibrariesResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsLibrariesResponse =
  getApiV1CollectionsLibrariesResponseSuccess;

export const getGetApiV1CollectionsLibrariesUrl = () => {
  return `/api/v1/collections/libraries`;
};

export const getApiV1CollectionsLibraries = async (
  options?: RequestInit,
): Promise<getApiV1CollectionsLibrariesResponse> => {
  return customFetcher<getApiV1CollectionsLibrariesResponse>(
    getGetApiV1CollectionsLibrariesUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a single collection with all its media
 * @summary Get a collection by slug or ID
 */
export type getApiV1CollectionsSlugOrIdResponse200 = {
  data: void;
  status: 200;
};

export type getApiV1CollectionsSlugOrIdResponse404 = {
  data: void;
  status: 404;
};

export type getApiV1CollectionsSlugOrIdResponseSuccess =
  getApiV1CollectionsSlugOrIdResponse200 & {
    headers: Headers;
  };
export type getApiV1CollectionsSlugOrIdResponseError =
  getApiV1CollectionsSlugOrIdResponse404 & {
    headers: Headers;
  };

export type getApiV1CollectionsSlugOrIdResponse =
  | getApiV1CollectionsSlugOrIdResponseSuccess
  | getApiV1CollectionsSlugOrIdResponseError;

export const getGetApiV1CollectionsSlugOrIdUrl = (slugOrId: string) => {
  return `/api/v1/collections/${slugOrId}`;
};

export const getApiV1CollectionsSlugOrId = async (
  slugOrId: string,
  options?: RequestInit,
): Promise<getApiV1CollectionsSlugOrIdResponse> => {
  return customFetcher<getApiV1CollectionsSlugOrIdResponse>(
    getGetApiV1CollectionsSlugOrIdUrl(slugOrId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Delete a collection and all its media relationships
 * @summary Delete a collection
 */
export type deleteApiV1CollectionsIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteApiV1CollectionsIdResponse404 = {
  data: void;
  status: 404;
};

export type deleteApiV1CollectionsIdResponseSuccess =
  deleteApiV1CollectionsIdResponse200 & {
    headers: Headers;
  };
export type deleteApiV1CollectionsIdResponseError =
  deleteApiV1CollectionsIdResponse404 & {
    headers: Headers;
  };

export type deleteApiV1CollectionsIdResponse =
  | deleteApiV1CollectionsIdResponseSuccess
  | deleteApiV1CollectionsIdResponseError;

export const getDeleteApiV1CollectionsIdUrl = (id: string) => {
  return `/api/v1/collections/${id}`;
};

export const deleteApiV1CollectionsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteApiV1CollectionsIdResponse> => {
  return customFetcher<deleteApiV1CollectionsIdResponse>(
    getDeleteApiV1CollectionsIdUrl(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Retrieve all comics with optional filtering, sorting, and pagination
 * @summary Get all comics
 */
export type getApiComicsResponse200 = {
  data: GetApiComics200;
  status: 200;
};

export type getApiComicsResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiComicsResponseSuccess = getApiComicsResponse200 & {
  headers: Headers;
};
export type getApiComicsResponseError = getApiComicsResponse400 & {
  headers: Headers;
};

export type getApiComicsResponse =
  | getApiComicsResponseSuccess
  | getApiComicsResponseError;

export const getGetApiComicsUrl = (params?: GetApiComicsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/comics?${stringifiedParams}`
    : `/api/comics`;
};

export const getApiComics = async (
  params?: GetApiComicsParams,
  options?: RequestInit,
): Promise<getApiComicsResponse> => {
  return customFetcher<getApiComicsResponse>(getGetApiComicsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific comic by its ID
 * @summary Get comic by ID
 */
export type getApiComicsIdResponse200 = {
  data: GetApiComicsId200;
  status: 200;
};

export type getApiComicsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiComicsIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiComicsIdResponseSuccess = getApiComicsIdResponse200 & {
  headers: Headers;
};
export type getApiComicsIdResponseError = (
  | getApiComicsIdResponse400
  | getApiComicsIdResponse404
) & {
  headers: Headers;
};

export type getApiComicsIdResponse =
  | getApiComicsIdResponseSuccess
  | getApiComicsIdResponseError;

export const getGetApiComicsIdUrl = (id: string) => {
  return `/api/comics/${id}`;
};

export const getApiComicsId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiComicsIdResponse> => {
  return customFetcher<getApiComicsIdResponse>(getGetApiComicsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Basic health check endpoint
 * @summary Health check
 */
export type getHealthResponse200 = {
  data: void;
  status: 200;
};

export type getHealthResponseSuccess = getHealthResponse200 & {
  headers: Headers;
};
export type getHealthResponse = getHealthResponseSuccess;

export const getGetHealthUrl = () => {
  return `/health`;
};

export const getHealth = async (
  options?: RequestInit,
): Promise<getHealthResponse> => {
  return customFetcher<getHealthResponse>(getGetHealthUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Checks if service and all dependencies are ready
 * @summary Readiness check
 */
export type getHealthReadyResponse200 = {
  data: void;
  status: 200;
};

export type getHealthReadyResponse503 = {
  data: void;
  status: 503;
};

export type getHealthReadyResponseSuccess = getHealthReadyResponse200 & {
  headers: Headers;
};
export type getHealthReadyResponseError = getHealthReadyResponse503 & {
  headers: Headers;
};

export type getHealthReadyResponse =
  | getHealthReadyResponseSuccess
  | getHealthReadyResponseError;

export const getGetHealthReadyUrl = () => {
  return `/health/ready`;
};

export const getHealthReady = async (
  options?: RequestInit,
): Promise<getHealthReadyResponse> => {
  return customFetcher<getHealthReadyResponse>(getGetHealthReadyUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Checks if the process is alive
 * @summary Liveness check
 */
export type getHealthLiveResponse200 = {
  data: void;
  status: 200;
};

export type getHealthLiveResponseSuccess = getHealthLiveResponse200 & {
  headers: Headers;
};
export type getHealthLiveResponse = getHealthLiveResponseSuccess;

export const getGetHealthLiveUrl = () => {
  return `/health/live`;
};

export const getHealthLive = async (
  options?: RequestInit,
): Promise<getHealthLiveResponse> => {
  return customFetcher<getHealthLiveResponse>(getGetHealthLiveUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve all media items with optional filtering, sorting, and pagination
 * @summary Get all media
 */
export type getApiMediaResponse200 = {
  data: GetApiMedia200;
  status: 200;
};

export type getApiMediaResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMediaResponseSuccess = getApiMediaResponse200 & {
  headers: Headers;
};
export type getApiMediaResponseError = getApiMediaResponse400 & {
  headers: Headers;
};

export type getApiMediaResponse =
  | getApiMediaResponseSuccess
  | getApiMediaResponseError;

export const getGetApiMediaUrl = (params?: GetApiMediaParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/media?${stringifiedParams}`
    : `/api/media`;
};

export const getApiMedia = async (
  params?: GetApiMediaParams,
  options?: RequestInit,
): Promise<getApiMediaResponse> => {
  return customFetcher<getApiMediaResponse>(getGetApiMediaUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve statistics about media in the library
 * @summary Get media statistics
 */
export type getApiMediaStatisticsResponse200 = {
  data: GetApiMediaStatistics200;
  status: 200;
};

export type getApiMediaStatisticsResponseSuccess =
  getApiMediaStatisticsResponse200 & {
    headers: Headers;
  };
export type getApiMediaStatisticsResponse =
  getApiMediaStatisticsResponseSuccess;

export const getGetApiMediaStatisticsUrl = () => {
  return `/api/media/statistics`;
};

export const getApiMediaStatistics = async (
  options?: RequestInit,
): Promise<getApiMediaStatisticsResponse> => {
  return customFetcher<getApiMediaStatisticsResponse>(
    getGetApiMediaStatisticsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a specific media item by its ID
 * @summary Get media by ID
 */
export type getApiMediaIdResponse200 = {
  data: GetApiMediaId200;
  status: 200;
};

export type getApiMediaIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiMediaIdResponseSuccess = getApiMediaIdResponse200 & {
  headers: Headers;
};
export type getApiMediaIdResponseError = getApiMediaIdResponse404 & {
  headers: Headers;
};

export type getApiMediaIdResponse =
  | getApiMediaIdResponseSuccess
  | getApiMediaIdResponseError;

export const getGetApiMediaIdUrl = (id: string) => {
  return `/api/media/${id}`;
};

export const getApiMediaId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMediaIdResponse> => {
  return customFetcher<getApiMediaIdResponse>(getGetApiMediaIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Stream a movie file with byte-range support for seeking
 * @summary Stream a movie
 */
export type getApiMediaStreamMovieIdResponse200 = {
  data: Blob;
  status: 200;
};

export type getApiMediaStreamMovieIdResponse206 = {
  data: Blob;
  status: 206;
};

export type getApiMediaStreamMovieIdResponse404 = {
  data: void;
  status: 404;
};

export type getApiMediaStreamMovieIdResponseSuccess = (
  | getApiMediaStreamMovieIdResponse200
  | getApiMediaStreamMovieIdResponse206
) & {
  headers: Headers;
};
export type getApiMediaStreamMovieIdResponseError =
  getApiMediaStreamMovieIdResponse404 & {
    headers: Headers;
  };

export type getApiMediaStreamMovieIdResponse =
  | getApiMediaStreamMovieIdResponseSuccess
  | getApiMediaStreamMovieIdResponseError;

export const getGetApiMediaStreamMovieIdUrl = (id: string) => {
  return `/api/media/stream/movie/${id}`;
};

export const getApiMediaStreamMovieId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMediaStreamMovieIdResponse> => {
  return customFetcher<getApiMediaStreamMovieIdResponse>(
    getGetApiMediaStreamMovieIdUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Stream a TV episode file with byte-range support for seeking
 * @summary Stream a TV episode
 */
export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse200 = {
  data: Blob;
  status: 200;
};

export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse206 = {
  data: Blob;
  status: 206;
};

export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse404 = {
  data: void;
  status: 404;
};

export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseSuccess =
  (
    | getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse200
    | getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse206
  ) & {
    headers: Headers;
  };
export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseError =
  getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse404 & {
    headers: Headers;
  };

export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse =
  | getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseSuccess
  | getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseError;

export const getGetApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberUrl = (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
) => {
  return `/api/media/stream/episode/${id}/${seasonNumber}/${episodeNumber}`;
};

export const getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumber = async (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
  options?: RequestInit,
): Promise<getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse> => {
  return customFetcher<getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse>(
    getGetApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberUrl(
      id,
      seasonNumber,
      episodeNumber,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve all movies with optional filtering, sorting, and pagination
 * @summary Get all movies
 */
export type getApiMoviesResponse200 = {
  data: GetApiMovies200;
  status: 200;
};

export type getApiMoviesResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMoviesResponseSuccess = getApiMoviesResponse200 & {
  headers: Headers;
};
export type getApiMoviesResponseError = getApiMoviesResponse400 & {
  headers: Headers;
};

export type getApiMoviesResponse =
  | getApiMoviesResponseSuccess
  | getApiMoviesResponseError;

export const getGetApiMoviesUrl = (params?: GetApiMoviesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/movies?${stringifiedParams}`
    : `/api/movies`;
};

export const getApiMovies = async (
  params?: GetApiMoviesParams,
  options?: RequestInit,
): Promise<getApiMoviesResponse> => {
  return customFetcher<getApiMoviesResponse>(getGetApiMoviesUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific movie by its ID
 * @summary Get movie by ID
 */
export type getApiMoviesIdResponse200 = {
  data: GetApiMoviesId200;
  status: 200;
};

export type getApiMoviesIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMoviesIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiMoviesIdResponseSuccess = getApiMoviesIdResponse200 & {
  headers: Headers;
};
export type getApiMoviesIdResponseError = (
  | getApiMoviesIdResponse400
  | getApiMoviesIdResponse404
) & {
  headers: Headers;
};

export type getApiMoviesIdResponse =
  | getApiMoviesIdResponseSuccess
  | getApiMoviesIdResponseError;

export const getGetApiMoviesIdUrl = (id: string) => {
  return `/api/movies/${id}`;
};

export const getApiMoviesId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMoviesIdResponse> => {
  return customFetcher<getApiMoviesIdResponse>(getGetApiMoviesIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve all music items with optional filtering, sorting, and pagination
 * @summary Get all music
 */
export type getApiMusicResponse200 = {
  data: GetApiMusic200;
  status: 200;
};

export type getApiMusicResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMusicResponseSuccess = getApiMusicResponse200 & {
  headers: Headers;
};
export type getApiMusicResponseError = getApiMusicResponse400 & {
  headers: Headers;
};

export type getApiMusicResponse =
  | getApiMusicResponseSuccess
  | getApiMusicResponseError;

export const getGetApiMusicUrl = (params?: GetApiMusicParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/music?${stringifiedParams}`
    : `/api/music`;
};

export const getApiMusic = async (
  params?: GetApiMusicParams,
  options?: RequestInit,
): Promise<getApiMusicResponse> => {
  return customFetcher<getApiMusicResponse>(getGetApiMusicUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific music item by its ID
 * @summary Get music by ID
 */
export type getApiMusicIdResponse200 = {
  data: GetApiMusicId200;
  status: 200;
};

export type getApiMusicIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMusicIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiMusicIdResponseSuccess = getApiMusicIdResponse200 & {
  headers: Headers;
};
export type getApiMusicIdResponseError = (
  | getApiMusicIdResponse400
  | getApiMusicIdResponse404
) & {
  headers: Headers;
};

export type getApiMusicIdResponse =
  | getApiMusicIdResponseSuccess
  | getApiMusicIdResponseError;

export const getGetApiMusicIdUrl = (id: string) => {
  return `/api/music/${id}`;
};

export const getApiMusicId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMusicIdResponse> => {
  return customFetcher<getApiMusicIdResponse>(getGetApiMusicIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Server-Sent Events (SSE) endpoint for receiving real-time notifications about scan, metadata, sync operations
 * @summary Real-time notification stream
 */
export type getApiNotificationsStreamResponse200 = {
  data: GetApiNotificationsStream200;
  status: 200;
};

export type getApiNotificationsStreamResponseSuccess =
  getApiNotificationsStreamResponse200 & {
    headers: Headers;
  };
export type getApiNotificationsStreamResponse =
  getApiNotificationsStreamResponseSuccess;

export const getGetApiNotificationsStreamUrl = () => {
  return `/api/notifications/stream`;
};

export const getApiNotificationsStream = async (
  options?: RequestInit,
): Promise<getApiNotificationsStreamResponse> => {
  return customFetcher<getApiNotificationsStreamResponse>(
    getGetApiNotificationsStreamUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Recursively scans a directory and returns all media files matching the specified media type
 * @summary Scan a directory for media files
 */
export type postApiScanResponse200 = {
  data: PostApiScan200;
  status: 200;
};

export type postApiScanResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postApiScanResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type postApiScanResponseSuccess = postApiScanResponse200 & {
  headers: Headers;
};
export type postApiScanResponseError = (
  | postApiScanResponse400
  | postApiScanResponse404
) & {
  headers: Headers;
};

export type postApiScanResponse =
  | postApiScanResponseSuccess
  | postApiScanResponseError;

export const getPostApiScanUrl = () => {
  return `/api/scan`;
};

export const postApiScan = async (
  postApiScanBody: PostApiScanBody,
  options?: RequestInit,
): Promise<postApiScanResponse> => {
  return customFetcher<postApiScanResponse>(getPostApiScanUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postApiScanBody),
  });
};

/**
 * Checks for file modifications and removals in a collection
 * @summary Sync a collection
 */
export type postApiScanSyncResponse200 = {
  data: PostApiScanSync200;
  status: 200;
};

export type postApiScanSyncResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type postApiScanSyncResponseSuccess = postApiScanSyncResponse200 & {
  headers: Headers;
};
export type postApiScanSyncResponseError = postApiScanSyncResponse404 & {
  headers: Headers;
};

export type postApiScanSyncResponse =
  | postApiScanSyncResponseSuccess
  | postApiScanSyncResponseError;

export const getPostApiScanSyncUrl = () => {
  return `/api/scan/sync`;
};

export const postApiScanSync = async (
  postApiScanSyncBody: PostApiScanSyncBody,
  options?: RequestInit,
): Promise<postApiScanSyncResponse> => {
  return customFetcher<postApiScanSyncResponse>(getPostApiScanSyncUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postApiScanSyncBody),
  });
};

/**
 * Checks for file modifications and removals across all collections (for cron jobs)
 * @summary Sync all collections
 */
export type postApiScanSyncAllResponse200 = {
  data: PostApiScanSyncAll200;
  status: 200;
};

export type postApiScanSyncAllResponseSuccess =
  postApiScanSyncAllResponse200 & {
    headers: Headers;
  };
export type postApiScanSyncAllResponse = postApiScanSyncAllResponseSuccess;

export const getPostApiScanSyncAllUrl = () => {
  return `/api/scan/sync-all`;
};

export const postApiScanSyncAll = async (
  options?: RequestInit,
): Promise<postApiScanSyncAllResponse> => {
  return customFetcher<postApiScanSyncAllResponse>(getPostApiScanSyncAllUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * Search for media and collections by title/name
 * @summary Search across all content
 */
export type getApiSearchResponse200 = {
  data: GetApiSearch200;
  status: 200;
};

export type getApiSearchResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiSearchResponseSuccess = getApiSearchResponse200 & {
  headers: Headers;
};
export type getApiSearchResponseError = getApiSearchResponse400 & {
  headers: Headers;
};

export type getApiSearchResponse =
  | getApiSearchResponseSuccess
  | getApiSearchResponseError;

export const getGetApiSearchUrl = (params: GetApiSearchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/search?${stringifiedParams}`
    : `/api/search`;
};

export const getApiSearch = async (
  params: GetApiSearchParams,
  options?: RequestInit,
): Promise<getApiSearchResponse> => {
  return customFetcher<getApiSearchResponse>(getGetApiSearchUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get current settings
 */
export type getApiSettingsResponse200 = {
  data: void;
  status: 200;
};

export type getApiSettingsResponseSuccess = getApiSettingsResponse200 & {
  headers: Headers;
};
export type getApiSettingsResponse = getApiSettingsResponseSuccess;

export const getGetApiSettingsUrl = () => {
  return `/api/settings`;
};

export const getApiSettings = async (
  options?: RequestInit,
): Promise<getApiSettingsResponse> => {
  return customFetcher<getApiSettingsResponse>(getGetApiSettingsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update settings
 */
export type patchApiSettingsResponse200 = {
  data: void;
  status: 200;
};

export type patchApiSettingsResponseSuccess = patchApiSettingsResponse200 & {
  headers: Headers;
};
export type patchApiSettingsResponse = patchApiSettingsResponseSuccess;

export const getPatchApiSettingsUrl = () => {
  return `/api/settings`;
};

export const patchApiSettings = async (
  patchApiSettingsBody: PatchApiSettingsBody,
  options?: RequestInit,
): Promise<patchApiSettingsResponse> => {
  return customFetcher<patchApiSettingsResponse>(getPatchApiSettingsUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(patchApiSettingsBody),
  });
};

/**
 * @summary Check if initial setup is complete
 */
export type getApiSettingsSetupStatusResponse200 = {
  data: void;
  status: 200;
};

export type getApiSettingsSetupStatusResponseSuccess =
  getApiSettingsSetupStatusResponse200 & {
    headers: Headers;
  };
export type getApiSettingsSetupStatusResponse =
  getApiSettingsSetupStatusResponseSuccess;

export const getGetApiSettingsSetupStatusUrl = () => {
  return `/api/settings/setup-status`;
};

export const getApiSettingsSetupStatus = async (
  options?: RequestInit,
): Promise<getApiSettingsSetupStatusResponse> => {
  return customFetcher<getApiSettingsSetupStatusResponse>(
    getGetApiSettingsSetupStatusUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Complete initial setup
 */
export type postApiSettingsCompleteSetupResponse200 = {
  data: void;
  status: 200;
};

export type postApiSettingsCompleteSetupResponseSuccess =
  postApiSettingsCompleteSetupResponse200 & {
    headers: Headers;
  };
export type postApiSettingsCompleteSetupResponse =
  postApiSettingsCompleteSetupResponseSuccess;

export const getPostApiSettingsCompleteSetupUrl = () => {
  return `/api/settings/complete-setup`;
};

export const postApiSettingsCompleteSetup = async (
  postApiSettingsCompleteSetupBody: PostApiSettingsCompleteSetupBody,
  options?: RequestInit,
): Promise<postApiSettingsCompleteSetupResponse> => {
  return customFetcher<postApiSettingsCompleteSetupResponse>(
    getPostApiSettingsCompleteSetupUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postApiSettingsCompleteSetupBody),
    },
  );
};

/**
 * Retrieve all TV shows with optional filtering, sorting, and pagination
 * @summary Get all TV shows
 */
export type getApiTvShowsResponse200 = {
  data: GetApiTvShows200;
  status: 200;
};

export type getApiTvShowsResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiTvShowsResponseSuccess = getApiTvShowsResponse200 & {
  headers: Headers;
};
export type getApiTvShowsResponseError = getApiTvShowsResponse400 & {
  headers: Headers;
};

export type getApiTvShowsResponse =
  | getApiTvShowsResponseSuccess
  | getApiTvShowsResponseError;

export const getGetApiTvShowsUrl = (params?: GetApiTvShowsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/tv-shows?${stringifiedParams}`
    : `/api/tv-shows`;
};

export const getApiTvShows = async (
  params?: GetApiTvShowsParams,
  options?: RequestInit,
): Promise<getApiTvShowsResponse> => {
  return customFetcher<getApiTvShowsResponse>(getGetApiTvShowsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific TV show by its ID
 * @summary Get TV show by ID
 */
export type getApiTvShowsIdResponse200 = {
  data: GetApiTvShowsId200;
  status: 200;
};

export type getApiTvShowsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiTvShowsIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiTvShowsIdResponseSuccess = getApiTvShowsIdResponse200 & {
  headers: Headers;
};
export type getApiTvShowsIdResponseError = (
  | getApiTvShowsIdResponse400
  | getApiTvShowsIdResponse404
) & {
  headers: Headers;
};

export type getApiTvShowsIdResponse =
  | getApiTvShowsIdResponseSuccess
  | getApiTvShowsIdResponseError;

export const getGetApiTvShowsIdUrl = (id: string) => {
  return `/api/tv-shows/${id}`;
};

export const getApiTvShowsId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiTvShowsIdResponse> => {
  return customFetcher<getApiTvShowsIdResponse>(getGetApiTvShowsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific season of a TV show
 * @summary Get a specific season
 */
export type getApiTvShowsIdSeasonsSeasonNumberResponse200 = {
  data: GetApiTvShowsIdSeasonsSeasonNumber200;
  status: 200;
};

export type getApiTvShowsIdSeasonsSeasonNumberResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiTvShowsIdSeasonsSeasonNumberResponseSuccess =
  getApiTvShowsIdSeasonsSeasonNumberResponse200 & {
    headers: Headers;
  };
export type getApiTvShowsIdSeasonsSeasonNumberResponseError =
  getApiTvShowsIdSeasonsSeasonNumberResponse404 & {
    headers: Headers;
  };

export type getApiTvShowsIdSeasonsSeasonNumberResponse =
  | getApiTvShowsIdSeasonsSeasonNumberResponseSuccess
  | getApiTvShowsIdSeasonsSeasonNumberResponseError;

export const getGetApiTvShowsIdSeasonsSeasonNumberUrl = (
  id: string,
  seasonNumber: number,
) => {
  return `/api/tv-shows/${id}/seasons/${seasonNumber}`;
};

export const getApiTvShowsIdSeasonsSeasonNumber = async (
  id: string,
  seasonNumber: number,
  options?: RequestInit,
): Promise<getApiTvShowsIdSeasonsSeasonNumberResponse> => {
  return customFetcher<getApiTvShowsIdSeasonsSeasonNumberResponse>(
    getGetApiTvShowsIdSeasonsSeasonNumberUrl(id, seasonNumber),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a specific episode of a TV show
 * @summary Get a specific episode
 */
export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse200 =
  {
    data: GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200;
    status: 200;
  };

export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse404 =
  {
    data: ErrorResponse;
    status: 404;
  };

export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseSuccess =
  getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse200 & {
    headers: Headers;
  };
export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseError =
  getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse404 & {
    headers: Headers;
  };

export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse =
  | getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseSuccess
  | getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseError;

export const getGetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberUrl = (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
) => {
  return `/api/tv-shows/${id}/seasons/${seasonNumber}/episodes/${episodeNumber}`;
};

export const getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber = async (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
  options?: RequestInit,
): Promise<getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse> => {
  return customFetcher<getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse>(
    getGetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberUrl(
      id,
      seasonNumber,
      episodeNumber,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};
