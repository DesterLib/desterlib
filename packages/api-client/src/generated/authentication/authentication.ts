/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  PostAuthLoginBody,
  PostAuthLoginPasswordlessBody,
  PostAuthLogoutBody,
  PostAuthRefreshBody,
  PostAuthRegisterBody,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * @summary Register a new user
 */
export type postAuthRegisterResponse201 = {
  data: void;
  status: 201;
};

export type postAuthRegisterResponseSuccess = postAuthRegisterResponse201 & {
  headers: Headers;
};
export type postAuthRegisterResponse = postAuthRegisterResponseSuccess;

export const getPostAuthRegisterUrl = () => {
  return `/auth/register`;
};

export const postAuthRegister = async (
  postAuthRegisterBody: PostAuthRegisterBody,
  options?: RequestInit,
): Promise<postAuthRegisterResponse> => {
  return customFetcher<postAuthRegisterResponse>(getPostAuthRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthRegisterBody),
  });
};

/**
 * @summary Login with username and password or PIN
 */
export type postAuthLoginResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLoginResponseSuccess = postAuthLoginResponse200 & {
  headers: Headers;
};
export type postAuthLoginResponse = postAuthLoginResponseSuccess;

export const getPostAuthLoginUrl = () => {
  return `/auth/login`;
};

export const postAuthLogin = async (
  postAuthLoginBody: PostAuthLoginBody,
  options?: RequestInit,
): Promise<postAuthLoginResponse> => {
  return customFetcher<postAuthLoginResponse>(getPostAuthLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthLoginBody),
  });
};

/**
 * @summary Login without password (passwordless accounts only)
 */
export type postAuthLoginPasswordlessResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLoginPasswordlessResponseSuccess =
  postAuthLoginPasswordlessResponse200 & {
    headers: Headers;
  };
export type postAuthLoginPasswordlessResponse =
  postAuthLoginPasswordlessResponseSuccess;

export const getPostAuthLoginPasswordlessUrl = () => {
  return `/auth/login/passwordless`;
};

export const postAuthLoginPasswordless = async (
  postAuthLoginPasswordlessBody: PostAuthLoginPasswordlessBody,
  options?: RequestInit,
): Promise<postAuthLoginPasswordlessResponse> => {
  return customFetcher<postAuthLoginPasswordlessResponse>(
    getPostAuthLoginPasswordlessUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postAuthLoginPasswordlessBody),
    },
  );
};

/**
 * @summary Refresh access token
 */
export type postAuthRefreshResponse200 = {
  data: void;
  status: 200;
};

export type postAuthRefreshResponseSuccess = postAuthRefreshResponse200 & {
  headers: Headers;
};
export type postAuthRefreshResponse = postAuthRefreshResponseSuccess;

export const getPostAuthRefreshUrl = () => {
  return `/auth/refresh`;
};

export const postAuthRefresh = async (
  postAuthRefreshBody: PostAuthRefreshBody,
  options?: RequestInit,
): Promise<postAuthRefreshResponse> => {
  return customFetcher<postAuthRefreshResponse>(getPostAuthRefreshUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthRefreshBody),
  });
};

/**
 * @summary Logout current session
 */
export type postAuthLogoutResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLogoutResponseSuccess = postAuthLogoutResponse200 & {
  headers: Headers;
};
export type postAuthLogoutResponse = postAuthLogoutResponseSuccess;

export const getPostAuthLogoutUrl = () => {
  return `/auth/logout`;
};

export const postAuthLogout = async (
  postAuthLogoutBody: PostAuthLogoutBody,
  options?: RequestInit,
): Promise<postAuthLogoutResponse> => {
  return customFetcher<postAuthLogoutResponse>(getPostAuthLogoutUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postAuthLogoutBody),
  });
};

/**
 * @summary Logout all sessions
 */
export type postAuthLogoutAllResponse200 = {
  data: void;
  status: 200;
};

export type postAuthLogoutAllResponseSuccess = postAuthLogoutAllResponse200 & {
  headers: Headers;
};
export type postAuthLogoutAllResponse = postAuthLogoutAllResponseSuccess;

export const getPostAuthLogoutAllUrl = () => {
  return `/auth/logout-all`;
};

export const postAuthLogoutAll = async (
  options?: RequestInit,
): Promise<postAuthLogoutAllResponse> => {
  return customFetcher<postAuthLogoutAllResponse>(getPostAuthLogoutAllUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get current user information
 */
export type getAuthMeResponse200 = {
  data: void;
  status: 200;
};

export type getAuthMeResponseSuccess = getAuthMeResponse200 & {
  headers: Headers;
};
export type getAuthMeResponse = getAuthMeResponseSuccess;

export const getGetAuthMeUrl = () => {
  return `/auth/me`;
};

export const getAuthMe = async (
  options?: RequestInit,
): Promise<getAuthMeResponse> => {
  return customFetcher<getAuthMeResponse>(getGetAuthMeUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update current user
 */
export type putAuthMeResponse200 = {
  data: void;
  status: 200;
};

export type putAuthMeResponseSuccess = putAuthMeResponse200 & {
  headers: Headers;
};
export type putAuthMeResponse = putAuthMeResponseSuccess;

export const getPutAuthMeUrl = () => {
  return `/auth/me`;
};

export const putAuthMe = async (
  options?: RequestInit,
): Promise<putAuthMeResponse> => {
  return customFetcher<putAuthMeResponse>(getPutAuthMeUrl(), {
    ...options,
    method: "PUT",
  });
};

/**
 * @summary Change password
 */
export type postAuthChangePasswordResponse200 = {
  data: void;
  status: 200;
};

export type postAuthChangePasswordResponseSuccess =
  postAuthChangePasswordResponse200 & {
    headers: Headers;
  };
export type postAuthChangePasswordResponse =
  postAuthChangePasswordResponseSuccess;

export const getPostAuthChangePasswordUrl = () => {
  return `/auth/change-password`;
};

export const postAuthChangePassword = async (
  options?: RequestInit,
): Promise<postAuthChangePasswordResponse> => {
  return customFetcher<postAuthChangePasswordResponse>(
    getPostAuthChangePasswordUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Change PIN
 */
export type postAuthChangePinResponse200 = {
  data: void;
  status: 200;
};

export type postAuthChangePinResponseSuccess = postAuthChangePinResponse200 & {
  headers: Headers;
};
export type postAuthChangePinResponse = postAuthChangePinResponseSuccess;

export const getPostAuthChangePinUrl = () => {
  return `/auth/change-pin`;
};

export const postAuthChangePin = async (
  options?: RequestInit,
): Promise<postAuthChangePinResponse> => {
  return customFetcher<postAuthChangePinResponse>(getPostAuthChangePinUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get all active sessions
 */
export type getAuthSessionsResponse200 = {
  data: void;
  status: 200;
};

export type getAuthSessionsResponseSuccess = getAuthSessionsResponse200 & {
  headers: Headers;
};
export type getAuthSessionsResponse = getAuthSessionsResponseSuccess;

export const getGetAuthSessionsUrl = () => {
  return `/auth/sessions`;
};

export const getAuthSessions = async (
  options?: RequestInit,
): Promise<getAuthSessionsResponse> => {
  return customFetcher<getAuthSessionsResponse>(getGetAuthSessionsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Revoke a specific session
 */
export type deleteAuthSessionsSessionIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteAuthSessionsSessionIdResponseSuccess =
  deleteAuthSessionsSessionIdResponse200 & {
    headers: Headers;
  };
export type deleteAuthSessionsSessionIdResponse =
  deleteAuthSessionsSessionIdResponseSuccess;

export const getDeleteAuthSessionsSessionIdUrl = (sessionId: string) => {
  return `/auth/sessions/${sessionId}`;
};

export const deleteAuthSessionsSessionId = async (
  sessionId: string,
  options?: RequestInit,
): Promise<deleteAuthSessionsSessionIdResponse> => {
  return customFetcher<deleteAuthSessionsSessionIdResponse>(
    getDeleteAuthSessionsSessionIdUrl(sessionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};
