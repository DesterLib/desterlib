/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  PatchApiSettingsBody,
  PostApiSettingsCompleteSetupBody,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * @summary Get current settings
 */
export type getApiSettingsResponse200 = {
  data: void;
  status: 200;
};

export type getApiSettingsResponseSuccess = getApiSettingsResponse200 & {
  headers: Headers;
};
export type getApiSettingsResponse = getApiSettingsResponseSuccess;

export const getGetApiSettingsUrl = () => {
  return `/api/settings`;
};

export const getApiSettings = async (
  options?: RequestInit,
): Promise<getApiSettingsResponse> => {
  return customFetcher<getApiSettingsResponse>(getGetApiSettingsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update settings
 */
export type patchApiSettingsResponse200 = {
  data: void;
  status: 200;
};

export type patchApiSettingsResponseSuccess = patchApiSettingsResponse200 & {
  headers: Headers;
};
export type patchApiSettingsResponse = patchApiSettingsResponseSuccess;

export const getPatchApiSettingsUrl = () => {
  return `/api/settings`;
};

export const patchApiSettings = async (
  patchApiSettingsBody: PatchApiSettingsBody,
  options?: RequestInit,
): Promise<patchApiSettingsResponse> => {
  return customFetcher<patchApiSettingsResponse>(getPatchApiSettingsUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(patchApiSettingsBody),
  });
};

/**
 * @summary Check if initial setup is complete
 */
export type getApiSettingsSetupStatusResponse200 = {
  data: void;
  status: 200;
};

export type getApiSettingsSetupStatusResponseSuccess =
  getApiSettingsSetupStatusResponse200 & {
    headers: Headers;
  };
export type getApiSettingsSetupStatusResponse =
  getApiSettingsSetupStatusResponseSuccess;

export const getGetApiSettingsSetupStatusUrl = () => {
  return `/api/settings/setup-status`;
};

export const getApiSettingsSetupStatus = async (
  options?: RequestInit,
): Promise<getApiSettingsSetupStatusResponse> => {
  return customFetcher<getApiSettingsSetupStatusResponse>(
    getGetApiSettingsSetupStatusUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Complete initial setup
 */
export type postApiSettingsCompleteSetupResponse200 = {
  data: void;
  status: 200;
};

export type postApiSettingsCompleteSetupResponseSuccess =
  postApiSettingsCompleteSetupResponse200 & {
    headers: Headers;
  };
export type postApiSettingsCompleteSetupResponse =
  postApiSettingsCompleteSetupResponseSuccess;

export const getPostApiSettingsCompleteSetupUrl = () => {
  return `/api/settings/complete-setup`;
};

export const postApiSettingsCompleteSetup = async (
  postApiSettingsCompleteSetupBody: PostApiSettingsCompleteSetupBody,
  options?: RequestInit,
): Promise<postApiSettingsCompleteSetupResponse> => {
  return customFetcher<postApiSettingsCompleteSetupResponse>(
    getPostApiSettingsCompleteSetupUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postApiSettingsCompleteSetupBody),
    },
  );
};
