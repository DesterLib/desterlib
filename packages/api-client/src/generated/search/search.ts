/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  ErrorResponse,
  GetApiSearch200,
  GetApiSearchParams,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * Search for media and collections by title/name
 * @summary Search across all content
 */
export type getApiSearchResponse200 = {
  data: GetApiSearch200;
  status: 200;
};

export type getApiSearchResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiSearchResponseSuccess = getApiSearchResponse200 & {
  headers: Headers;
};
export type getApiSearchResponseError = getApiSearchResponse400 & {
  headers: Headers;
};

export type getApiSearchResponse =
  | getApiSearchResponseSuccess
  | getApiSearchResponseError;

export const getGetApiSearchUrl = (params: GetApiSearchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/search?${stringifiedParams}`
    : `/api/search`;
};

export const getApiSearch = async (
  params: GetApiSearchParams,
  options?: RequestInit,
): Promise<getApiSearchResponse> => {
  return customFetcher<getApiSearchResponse>(getGetApiSearchUrl(params), {
    ...options,
    method: "GET",
  });
};
