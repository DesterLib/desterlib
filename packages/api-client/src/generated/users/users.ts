/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import { customFetcher } from "../../core/fetcher";

/**
 * @summary List all users (admin only)
 */
export type getUsersResponse200 = {
  data: void;
  status: 200;
};

export type getUsersResponseSuccess = getUsersResponse200 & {
  headers: Headers;
};
export type getUsersResponse = getUsersResponseSuccess;

export const getGetUsersUrl = () => {
  return `/users`;
};

export const getUsers = async (
  options?: RequestInit,
): Promise<getUsersResponse> => {
  return customFetcher<getUsersResponse>(getGetUsersUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get user by ID (admin only)
 */
export type getUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type getUsersUserIdResponseSuccess = getUsersUserIdResponse200 & {
  headers: Headers;
};
export type getUsersUserIdResponse = getUsersUserIdResponseSuccess;

export const getGetUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const getUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<getUsersUserIdResponse> => {
  return customFetcher<getUsersUserIdResponse>(getGetUsersUserIdUrl(userId), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Update user (admin only)
 */
export type putUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type putUsersUserIdResponseSuccess = putUsersUserIdResponse200 & {
  headers: Headers;
};
export type putUsersUserIdResponse = putUsersUserIdResponseSuccess;

export const getPutUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const putUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<putUsersUserIdResponse> => {
  return customFetcher<putUsersUserIdResponse>(getPutUsersUserIdUrl(userId), {
    ...options,
    method: "PUT",
  });
};

/**
 * @summary Delete user (admin only)
 */
export type deleteUsersUserIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteUsersUserIdResponseSuccess = deleteUsersUserIdResponse200 & {
  headers: Headers;
};
export type deleteUsersUserIdResponse = deleteUsersUserIdResponseSuccess;

export const getDeleteUsersUserIdUrl = (userId: string) => {
  return `/users/${userId}`;
};

export const deleteUsersUserId = async (
  userId: string,
  options?: RequestInit,
): Promise<deleteUsersUserIdResponse> => {
  return customFetcher<deleteUsersUserIdResponse>(
    getDeleteUsersUserIdUrl(userId),
    {
      ...options,
      method: "DELETE",
    },
  );
};
