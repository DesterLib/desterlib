/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  ErrorResponse,
  GetApiMusic200,
  GetApiMusicId200,
  GetApiMusicParams,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * Retrieve all music items with optional filtering, sorting, and pagination
 * @summary Get all music
 */
export type getApiMusicResponse200 = {
  data: GetApiMusic200;
  status: 200;
};

export type getApiMusicResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMusicResponseSuccess = getApiMusicResponse200 & {
  headers: Headers;
};
export type getApiMusicResponseError = getApiMusicResponse400 & {
  headers: Headers;
};

export type getApiMusicResponse =
  | getApiMusicResponseSuccess
  | getApiMusicResponseError;

export const getGetApiMusicUrl = (params?: GetApiMusicParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/music?${stringifiedParams}`
    : `/api/music`;
};

export const getApiMusic = async (
  params?: GetApiMusicParams,
  options?: RequestInit,
): Promise<getApiMusicResponse> => {
  return customFetcher<getApiMusicResponse>(getGetApiMusicUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific music item by its ID
 * @summary Get music by ID
 */
export type getApiMusicIdResponse200 = {
  data: GetApiMusicId200;
  status: 200;
};

export type getApiMusicIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMusicIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiMusicIdResponseSuccess = getApiMusicIdResponse200 & {
  headers: Headers;
};
export type getApiMusicIdResponseError = (
  | getApiMusicIdResponse400
  | getApiMusicIdResponse404
) & {
  headers: Headers;
};

export type getApiMusicIdResponse =
  | getApiMusicIdResponseSuccess
  | getApiMusicIdResponseError;

export const getGetApiMusicIdUrl = (id: string) => {
  return `/api/music/${id}`;
};

export const getApiMusicId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMusicIdResponse> => {
  return customFetcher<getApiMusicIdResponse>(getGetApiMusicIdUrl(id), {
    ...options,
    method: "GET",
  });
};
