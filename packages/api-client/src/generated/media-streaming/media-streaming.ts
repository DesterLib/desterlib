/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import { customFetcher } from "../../core/fetcher";

/**
 * Stream a movie file with byte-range support for seeking
 * @summary Stream a movie
 */
export type getApiMediaStreamMovieIdResponse200 = {
  data: Blob;
  status: 200;
};

export type getApiMediaStreamMovieIdResponse206 = {
  data: Blob;
  status: 206;
};

export type getApiMediaStreamMovieIdResponse404 = {
  data: void;
  status: 404;
};

export type getApiMediaStreamMovieIdResponseSuccess = (
  | getApiMediaStreamMovieIdResponse200
  | getApiMediaStreamMovieIdResponse206
) & {
  headers: Headers;
};
export type getApiMediaStreamMovieIdResponseError =
  getApiMediaStreamMovieIdResponse404 & {
    headers: Headers;
  };

export type getApiMediaStreamMovieIdResponse =
  | getApiMediaStreamMovieIdResponseSuccess
  | getApiMediaStreamMovieIdResponseError;

export const getGetApiMediaStreamMovieIdUrl = (id: string) => {
  return `/api/media/stream/movie/${id}`;
};

export const getApiMediaStreamMovieId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMediaStreamMovieIdResponse> => {
  return customFetcher<getApiMediaStreamMovieIdResponse>(
    getGetApiMediaStreamMovieIdUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Stream a TV episode file with byte-range support for seeking
 * @summary Stream a TV episode
 */
export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse200 = {
  data: Blob;
  status: 200;
};

export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse206 = {
  data: Blob;
  status: 206;
};

export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse404 = {
  data: void;
  status: 404;
};

export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseSuccess =
  (
    | getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse200
    | getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse206
  ) & {
    headers: Headers;
  };
export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseError =
  getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse404 & {
    headers: Headers;
  };

export type getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse =
  | getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseSuccess
  | getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponseError;

export const getGetApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberUrl = (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
) => {
  return `/api/media/stream/episode/${id}/${seasonNumber}/${episodeNumber}`;
};

export const getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumber = async (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
  options?: RequestInit,
): Promise<getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse> => {
  return customFetcher<getApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberResponse>(
    getGetApiMediaStreamEpisodeIdSeasonNumberEpisodeNumberUrl(
      id,
      seasonNumber,
      episodeNumber,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};
