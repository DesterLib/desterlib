/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  ErrorResponse,
  GetApiTvShows200,
  GetApiTvShowsId200,
  GetApiTvShowsIdSeasonsSeasonNumber200,
  GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200,
  GetApiTvShowsParams,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * Retrieve all TV shows with optional filtering, sorting, and pagination
 * @summary Get all TV shows
 */
export type getApiTvShowsResponse200 = {
  data: GetApiTvShows200;
  status: 200;
};

export type getApiTvShowsResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiTvShowsResponseSuccess = getApiTvShowsResponse200 & {
  headers: Headers;
};
export type getApiTvShowsResponseError = getApiTvShowsResponse400 & {
  headers: Headers;
};

export type getApiTvShowsResponse =
  | getApiTvShowsResponseSuccess
  | getApiTvShowsResponseError;

export const getGetApiTvShowsUrl = (params?: GetApiTvShowsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/tv-shows?${stringifiedParams}`
    : `/api/tv-shows`;
};

export const getApiTvShows = async (
  params?: GetApiTvShowsParams,
  options?: RequestInit,
): Promise<getApiTvShowsResponse> => {
  return customFetcher<getApiTvShowsResponse>(getGetApiTvShowsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific TV show by its ID
 * @summary Get TV show by ID
 */
export type getApiTvShowsIdResponse200 = {
  data: GetApiTvShowsId200;
  status: 200;
};

export type getApiTvShowsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiTvShowsIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiTvShowsIdResponseSuccess = getApiTvShowsIdResponse200 & {
  headers: Headers;
};
export type getApiTvShowsIdResponseError = (
  | getApiTvShowsIdResponse400
  | getApiTvShowsIdResponse404
) & {
  headers: Headers;
};

export type getApiTvShowsIdResponse =
  | getApiTvShowsIdResponseSuccess
  | getApiTvShowsIdResponseError;

export const getGetApiTvShowsIdUrl = (id: string) => {
  return `/api/tv-shows/${id}`;
};

export const getApiTvShowsId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiTvShowsIdResponse> => {
  return customFetcher<getApiTvShowsIdResponse>(getGetApiTvShowsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific season of a TV show
 * @summary Get a specific season
 */
export type getApiTvShowsIdSeasonsSeasonNumberResponse200 = {
  data: GetApiTvShowsIdSeasonsSeasonNumber200;
  status: 200;
};

export type getApiTvShowsIdSeasonsSeasonNumberResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiTvShowsIdSeasonsSeasonNumberResponseSuccess =
  getApiTvShowsIdSeasonsSeasonNumberResponse200 & {
    headers: Headers;
  };
export type getApiTvShowsIdSeasonsSeasonNumberResponseError =
  getApiTvShowsIdSeasonsSeasonNumberResponse404 & {
    headers: Headers;
  };

export type getApiTvShowsIdSeasonsSeasonNumberResponse =
  | getApiTvShowsIdSeasonsSeasonNumberResponseSuccess
  | getApiTvShowsIdSeasonsSeasonNumberResponseError;

export const getGetApiTvShowsIdSeasonsSeasonNumberUrl = (
  id: string,
  seasonNumber: number,
) => {
  return `/api/tv-shows/${id}/seasons/${seasonNumber}`;
};

export const getApiTvShowsIdSeasonsSeasonNumber = async (
  id: string,
  seasonNumber: number,
  options?: RequestInit,
): Promise<getApiTvShowsIdSeasonsSeasonNumberResponse> => {
  return customFetcher<getApiTvShowsIdSeasonsSeasonNumberResponse>(
    getGetApiTvShowsIdSeasonsSeasonNumberUrl(id, seasonNumber),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a specific episode of a TV show
 * @summary Get a specific episode
 */
export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse200 =
  {
    data: GetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber200;
    status: 200;
  };

export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse404 =
  {
    data: ErrorResponse;
    status: 404;
  };

export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseSuccess =
  getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse200 & {
    headers: Headers;
  };
export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseError =
  getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse404 & {
    headers: Headers;
  };

export type getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse =
  | getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseSuccess
  | getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponseError;

export const getGetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberUrl = (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
) => {
  return `/api/tv-shows/${id}/seasons/${seasonNumber}/episodes/${episodeNumber}`;
};

export const getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumber = async (
  id: string,
  seasonNumber: number,
  episodeNumber: number,
  options?: RequestInit,
): Promise<getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse> => {
  return customFetcher<getApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberResponse>(
    getGetApiTvShowsIdSeasonsSeasonNumberEpisodesEpisodeNumberUrl(
      id,
      seasonNumber,
      episodeNumber,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};
