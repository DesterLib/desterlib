/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import { customFetcher } from "../../core/fetcher";

/**
 * Basic health check endpoint
 * @summary Health check
 */
export type getHealthResponse200 = {
  data: void;
  status: 200;
};

export type getHealthResponseSuccess = getHealthResponse200 & {
  headers: Headers;
};
export type getHealthResponse = getHealthResponseSuccess;

export const getGetHealthUrl = () => {
  return `/health`;
};

export const getHealth = async (
  options?: RequestInit,
): Promise<getHealthResponse> => {
  return customFetcher<getHealthResponse>(getGetHealthUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Checks if service and all dependencies are ready
 * @summary Readiness check
 */
export type getHealthReadyResponse200 = {
  data: void;
  status: 200;
};

export type getHealthReadyResponse503 = {
  data: void;
  status: 503;
};

export type getHealthReadyResponseSuccess = getHealthReadyResponse200 & {
  headers: Headers;
};
export type getHealthReadyResponseError = getHealthReadyResponse503 & {
  headers: Headers;
};

export type getHealthReadyResponse =
  | getHealthReadyResponseSuccess
  | getHealthReadyResponseError;

export const getGetHealthReadyUrl = () => {
  return `/health/ready`;
};

export const getHealthReady = async (
  options?: RequestInit,
): Promise<getHealthReadyResponse> => {
  return customFetcher<getHealthReadyResponse>(getGetHealthReadyUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Checks if the process is alive
 * @summary Liveness check
 */
export type getHealthLiveResponse200 = {
  data: void;
  status: 200;
};

export type getHealthLiveResponseSuccess = getHealthLiveResponse200 & {
  headers: Headers;
};
export type getHealthLiveResponse = getHealthLiveResponseSuccess;

export const getGetHealthLiveUrl = () => {
  return `/health/live`;
};

export const getHealthLive = async (
  options?: RequestInit,
): Promise<getHealthLiveResponse> => {
  return customFetcher<getHealthLiveResponse>(getGetHealthLiveUrl(), {
    ...options,
    method: "GET",
  });
};
