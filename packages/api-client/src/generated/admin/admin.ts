/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type { GetAdminAlertsHistoryParams } from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * @summary List all database backups
 */
export type getAdminBackupsResponse200 = {
  data: void;
  status: 200;
};

export type getAdminBackupsResponseSuccess = getAdminBackupsResponse200 & {
  headers: Headers;
};
export type getAdminBackupsResponse = getAdminBackupsResponseSuccess;

export const getGetAdminBackupsUrl = () => {
  return `/admin/backups`;
};

export const getAdminBackups = async (
  options?: RequestInit,
): Promise<getAdminBackupsResponse> => {
  return customFetcher<getAdminBackupsResponse>(getGetAdminBackupsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Create a new database backup
 */
export type postAdminBackupsResponse201 = {
  data: void;
  status: 201;
};

export type postAdminBackupsResponseSuccess = postAdminBackupsResponse201 & {
  headers: Headers;
};
export type postAdminBackupsResponse = postAdminBackupsResponseSuccess;

export const getPostAdminBackupsUrl = () => {
  return `/admin/backups`;
};

export const postAdminBackups = async (
  options?: RequestInit,
): Promise<postAdminBackupsResponse> => {
  return customFetcher<postAdminBackupsResponse>(getPostAdminBackupsUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Restore database from backup
 */
export type postAdminBackupsFilenameRestoreResponse200 = {
  data: void;
  status: 200;
};

export type postAdminBackupsFilenameRestoreResponseSuccess =
  postAdminBackupsFilenameRestoreResponse200 & {
    headers: Headers;
  };
export type postAdminBackupsFilenameRestoreResponse =
  postAdminBackupsFilenameRestoreResponseSuccess;

export const getPostAdminBackupsFilenameRestoreUrl = (filename: string) => {
  return `/admin/backups/${filename}/restore`;
};

export const postAdminBackupsFilenameRestore = async (
  filename: string,
  options?: RequestInit,
): Promise<postAdminBackupsFilenameRestoreResponse> => {
  return customFetcher<postAdminBackupsFilenameRestoreResponse>(
    getPostAdminBackupsFilenameRestoreUrl(filename),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Delete a backup file
 */
export type deleteAdminBackupsFilenameResponse200 = {
  data: void;
  status: 200;
};

export type deleteAdminBackupsFilenameResponseSuccess =
  deleteAdminBackupsFilenameResponse200 & {
    headers: Headers;
  };
export type deleteAdminBackupsFilenameResponse =
  deleteAdminBackupsFilenameResponseSuccess;

export const getDeleteAdminBackupsFilenameUrl = (filename: string) => {
  return `/admin/backups/${filename}`;
};

export const deleteAdminBackupsFilename = async (
  filename: string,
  options?: RequestInit,
): Promise<deleteAdminBackupsFilenameResponse> => {
  return customFetcher<deleteAdminBackupsFilenameResponse>(
    getDeleteAdminBackupsFilenameUrl(filename),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Manually update business metrics
 */
export type postAdminMetricsUpdateResponse200 = {
  data: void;
  status: 200;
};

export type postAdminMetricsUpdateResponseSuccess =
  postAdminMetricsUpdateResponse200 & {
    headers: Headers;
  };
export type postAdminMetricsUpdateResponse =
  postAdminMetricsUpdateResponseSuccess;

export const getPostAdminMetricsUpdateUrl = () => {
  return `/admin/metrics/update`;
};

export const postAdminMetricsUpdate = async (
  options?: RequestInit,
): Promise<postAdminMetricsUpdateResponse> => {
  return customFetcher<postAdminMetricsUpdateResponse>(
    getPostAdminMetricsUpdateUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Get active alerts
 */
export type getAdminAlertsResponse200 = {
  data: void;
  status: 200;
};

export type getAdminAlertsResponseSuccess = getAdminAlertsResponse200 & {
  headers: Headers;
};
export type getAdminAlertsResponse = getAdminAlertsResponseSuccess;

export const getGetAdminAlertsUrl = () => {
  return `/admin/alerts`;
};

export const getAdminAlerts = async (
  options?: RequestInit,
): Promise<getAdminAlertsResponse> => {
  return customFetcher<getAdminAlertsResponse>(getGetAdminAlertsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get alert history
 */
export type getAdminAlertsHistoryResponse200 = {
  data: void;
  status: 200;
};

export type getAdminAlertsHistoryResponseSuccess =
  getAdminAlertsHistoryResponse200 & {
    headers: Headers;
  };
export type getAdminAlertsHistoryResponse =
  getAdminAlertsHistoryResponseSuccess;

export const getGetAdminAlertsHistoryUrl = (
  params?: GetAdminAlertsHistoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/alerts/history?${stringifiedParams}`
    : `/admin/alerts/history`;
};

export const getAdminAlertsHistory = async (
  params?: GetAdminAlertsHistoryParams,
  options?: RequestInit,
): Promise<getAdminAlertsHistoryResponse> => {
  return customFetcher<getAdminAlertsHistoryResponse>(
    getGetAdminAlertsHistoryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Perform comprehensive health check
 */
export type getAdminHealthCheckResponse200 = {
  data: void;
  status: 200;
};

export type getAdminHealthCheckResponseSuccess =
  getAdminHealthCheckResponse200 & {
    headers: Headers;
  };
export type getAdminHealthCheckResponse = getAdminHealthCheckResponseSuccess;

export const getGetAdminHealthCheckUrl = () => {
  return `/admin/health/check`;
};

export const getAdminHealthCheck = async (
  options?: RequestInit,
): Promise<getAdminHealthCheckResponse> => {
  return customFetcher<getAdminHealthCheckResponse>(
    getGetAdminHealthCheckUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get performance statistics
 */
export type getAdminPerformanceResponse200 = {
  data: void;
  status: 200;
};

export type getAdminPerformanceResponseSuccess =
  getAdminPerformanceResponse200 & {
    headers: Headers;
  };
export type getAdminPerformanceResponse = getAdminPerformanceResponseSuccess;

export const getGetAdminPerformanceUrl = () => {
  return `/admin/performance`;
};

export const getAdminPerformance = async (
  options?: RequestInit,
): Promise<getAdminPerformanceResponse> => {
  return customFetcher<getAdminPerformanceResponse>(
    getGetAdminPerformanceUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Reset performance statistics
 */
export type postAdminPerformanceResetResponse200 = {
  data: void;
  status: 200;
};

export type postAdminPerformanceResetResponseSuccess =
  postAdminPerformanceResetResponse200 & {
    headers: Headers;
  };
export type postAdminPerformanceResetResponse =
  postAdminPerformanceResetResponseSuccess;

export const getPostAdminPerformanceResetUrl = () => {
  return `/admin/performance/reset`;
};

export const postAdminPerformanceReset = async (
  options?: RequestInit,
): Promise<postAdminPerformanceResetResponse> => {
  return customFetcher<postAdminPerformanceResetResponse>(
    getPostAdminPerformanceResetUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};
