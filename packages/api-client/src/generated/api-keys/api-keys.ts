/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import { customFetcher } from "../../core/fetcher";

/**
 * @summary List all API keys
 */
export type getAuthApiKeysResponse200 = {
  data: void;
  status: 200;
};

export type getAuthApiKeysResponseSuccess = getAuthApiKeysResponse200 & {
  headers: Headers;
};
export type getAuthApiKeysResponse = getAuthApiKeysResponseSuccess;

export const getGetAuthApiKeysUrl = () => {
  return `/auth/api-keys`;
};

export const getAuthApiKeys = async (
  options?: RequestInit,
): Promise<getAuthApiKeysResponse> => {
  return customFetcher<getAuthApiKeysResponse>(getGetAuthApiKeysUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Create a new API key
 */
export type postAuthApiKeysResponse201 = {
  data: void;
  status: 201;
};

export type postAuthApiKeysResponseSuccess = postAuthApiKeysResponse201 & {
  headers: Headers;
};
export type postAuthApiKeysResponse = postAuthApiKeysResponseSuccess;

export const getPostAuthApiKeysUrl = () => {
  return `/auth/api-keys`;
};

export const postAuthApiKeys = async (
  options?: RequestInit,
): Promise<postAuthApiKeysResponse> => {
  return customFetcher<postAuthApiKeysResponse>(getPostAuthApiKeysUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * @summary Get a specific API key
 */
export type getAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type getAuthApiKeysKeyIdResponseSuccess =
  getAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type getAuthApiKeysKeyIdResponse = getAuthApiKeysKeyIdResponseSuccess;

export const getGetAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const getAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<getAuthApiKeysKeyIdResponse> => {
  return customFetcher<getAuthApiKeysKeyIdResponse>(
    getGetAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update an API key
 */
export type putAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type putAuthApiKeysKeyIdResponseSuccess =
  putAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type putAuthApiKeysKeyIdResponse = putAuthApiKeysKeyIdResponseSuccess;

export const getPutAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const putAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<putAuthApiKeysKeyIdResponse> => {
  return customFetcher<putAuthApiKeysKeyIdResponse>(
    getPutAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "PUT",
    },
  );
};

/**
 * @summary Delete an API key
 */
export type deleteAuthApiKeysKeyIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteAuthApiKeysKeyIdResponseSuccess =
  deleteAuthApiKeysKeyIdResponse200 & {
    headers: Headers;
  };
export type deleteAuthApiKeysKeyIdResponse =
  deleteAuthApiKeysKeyIdResponseSuccess;

export const getDeleteAuthApiKeysKeyIdUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}`;
};

export const deleteAuthApiKeysKeyId = async (
  keyId: string,
  options?: RequestInit,
): Promise<deleteAuthApiKeysKeyIdResponse> => {
  return customFetcher<deleteAuthApiKeysKeyIdResponse>(
    getDeleteAuthApiKeysKeyIdUrl(keyId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Revoke an API key
 */
export type postAuthApiKeysKeyIdRevokeResponse200 = {
  data: void;
  status: 200;
};

export type postAuthApiKeysKeyIdRevokeResponseSuccess =
  postAuthApiKeysKeyIdRevokeResponse200 & {
    headers: Headers;
  };
export type postAuthApiKeysKeyIdRevokeResponse =
  postAuthApiKeysKeyIdRevokeResponseSuccess;

export const getPostAuthApiKeysKeyIdRevokeUrl = (keyId: string) => {
  return `/auth/api-keys/${keyId}/revoke`;
};

export const postAuthApiKeysKeyIdRevoke = async (
  keyId: string,
  options?: RequestInit,
): Promise<postAuthApiKeysKeyIdRevokeResponse> => {
  return customFetcher<postAuthApiKeysKeyIdRevokeResponse>(
    getPostAuthApiKeysKeyIdRevokeUrl(keyId),
    {
      ...options,
      method: "POST",
    },
  );
};
