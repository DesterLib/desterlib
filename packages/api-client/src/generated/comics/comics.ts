/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  ErrorResponse,
  GetApiComics200,
  GetApiComicsId200,
  GetApiComicsParams,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * Retrieve all comics with optional filtering, sorting, and pagination
 * @summary Get all comics
 */
export type getApiComicsResponse200 = {
  data: GetApiComics200;
  status: 200;
};

export type getApiComicsResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiComicsResponseSuccess = getApiComicsResponse200 & {
  headers: Headers;
};
export type getApiComicsResponseError = getApiComicsResponse400 & {
  headers: Headers;
};

export type getApiComicsResponse =
  | getApiComicsResponseSuccess
  | getApiComicsResponseError;

export const getGetApiComicsUrl = (params?: GetApiComicsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/comics?${stringifiedParams}`
    : `/api/comics`;
};

export const getApiComics = async (
  params?: GetApiComicsParams,
  options?: RequestInit,
): Promise<getApiComicsResponse> => {
  return customFetcher<getApiComicsResponse>(getGetApiComicsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific comic by its ID
 * @summary Get comic by ID
 */
export type getApiComicsIdResponse200 = {
  data: GetApiComicsId200;
  status: 200;
};

export type getApiComicsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiComicsIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiComicsIdResponseSuccess = getApiComicsIdResponse200 & {
  headers: Headers;
};
export type getApiComicsIdResponseError = (
  | getApiComicsIdResponse400
  | getApiComicsIdResponse404
) & {
  headers: Headers;
};

export type getApiComicsIdResponse =
  | getApiComicsIdResponseSuccess
  | getApiComicsIdResponseError;

export const getGetApiComicsIdUrl = (id: string) => {
  return `/api/comics/${id}`;
};

export const getApiComicsId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiComicsIdResponse> => {
  return customFetcher<getApiComicsIdResponse>(getGetApiComicsIdUrl(id), {
    ...options,
    method: "GET",
  });
};
