/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  ErrorResponse,
  GetApiMovies200,
  GetApiMoviesId200,
  GetApiMoviesParams,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * Retrieve all movies with optional filtering, sorting, and pagination
 * @summary Get all movies
 */
export type getApiMoviesResponse200 = {
  data: GetApiMovies200;
  status: 200;
};

export type getApiMoviesResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMoviesResponseSuccess = getApiMoviesResponse200 & {
  headers: Headers;
};
export type getApiMoviesResponseError = getApiMoviesResponse400 & {
  headers: Headers;
};

export type getApiMoviesResponse =
  | getApiMoviesResponseSuccess
  | getApiMoviesResponseError;

export const getGetApiMoviesUrl = (params?: GetApiMoviesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/movies?${stringifiedParams}`
    : `/api/movies`;
};

export const getApiMovies = async (
  params?: GetApiMoviesParams,
  options?: RequestInit,
): Promise<getApiMoviesResponse> => {
  return customFetcher<getApiMoviesResponse>(getGetApiMoviesUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve a specific movie by its ID
 * @summary Get movie by ID
 */
export type getApiMoviesIdResponse200 = {
  data: GetApiMoviesId200;
  status: 200;
};

export type getApiMoviesIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMoviesIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiMoviesIdResponseSuccess = getApiMoviesIdResponse200 & {
  headers: Headers;
};
export type getApiMoviesIdResponseError = (
  | getApiMoviesIdResponse400
  | getApiMoviesIdResponse404
) & {
  headers: Headers;
};

export type getApiMoviesIdResponse =
  | getApiMoviesIdResponseSuccess
  | getApiMoviesIdResponseError;

export const getGetApiMoviesIdUrl = (id: string) => {
  return `/api/movies/${id}`;
};

export const getApiMoviesId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMoviesIdResponse> => {
  return customFetcher<getApiMoviesIdResponse>(getGetApiMoviesIdUrl(id), {
    ...options,
    method: "GET",
  });
};
