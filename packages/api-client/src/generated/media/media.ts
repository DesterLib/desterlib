/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Dester Media Library API
 * A media library management system similar to Plex/Jellyfin
 * OpenAPI spec version: 0.0.1
 */
import type {
  ErrorResponse,
  GetApiMedia200,
  GetApiMediaId200,
  GetApiMediaParams,
  GetApiMediaStatistics200,
} from "../api.schemas";

import { customFetcher } from "../../core/fetcher";

/**
 * Retrieve all media items with optional filtering, sorting, and pagination
 * @summary Get all media
 */
export type getApiMediaResponse200 = {
  data: GetApiMedia200;
  status: 200;
};

export type getApiMediaResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getApiMediaResponseSuccess = getApiMediaResponse200 & {
  headers: Headers;
};
export type getApiMediaResponseError = getApiMediaResponse400 & {
  headers: Headers;
};

export type getApiMediaResponse =
  | getApiMediaResponseSuccess
  | getApiMediaResponseError;

export const getGetApiMediaUrl = (params?: GetApiMediaParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/media?${stringifiedParams}`
    : `/api/media`;
};

export const getApiMedia = async (
  params?: GetApiMediaParams,
  options?: RequestInit,
): Promise<getApiMediaResponse> => {
  return customFetcher<getApiMediaResponse>(getGetApiMediaUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * Retrieve statistics about media in the library
 * @summary Get media statistics
 */
export type getApiMediaStatisticsResponse200 = {
  data: GetApiMediaStatistics200;
  status: 200;
};

export type getApiMediaStatisticsResponseSuccess =
  getApiMediaStatisticsResponse200 & {
    headers: Headers;
  };
export type getApiMediaStatisticsResponse =
  getApiMediaStatisticsResponseSuccess;

export const getGetApiMediaStatisticsUrl = () => {
  return `/api/media/statistics`;
};

export const getApiMediaStatistics = async (
  options?: RequestInit,
): Promise<getApiMediaStatisticsResponse> => {
  return customFetcher<getApiMediaStatisticsResponse>(
    getGetApiMediaStatisticsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Retrieve a specific media item by its ID
 * @summary Get media by ID
 */
export type getApiMediaIdResponse200 = {
  data: GetApiMediaId200;
  status: 200;
};

export type getApiMediaIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getApiMediaIdResponseSuccess = getApiMediaIdResponse200 & {
  headers: Headers;
};
export type getApiMediaIdResponseError = getApiMediaIdResponse404 & {
  headers: Headers;
};

export type getApiMediaIdResponse =
  | getApiMediaIdResponseSuccess
  | getApiMediaIdResponseError;

export const getGetApiMediaIdUrl = (id: string) => {
  return `/api/media/${id}`;
};

export const getApiMediaId = async (
  id: string,
  options?: RequestInit,
): Promise<getApiMediaIdResponse> => {
  return customFetcher<getApiMediaIdResponse>(getGetApiMediaIdUrl(id), {
    ...options,
    method: "GET",
  });
};
